src/NodeToken.h:4467:29: error: Using object that points to local variable '__f' that is out of scope. [invalidLifetime]
                        c = __num & 0xff;
                            ^
src/NodeToken.h:4458:58: note: Address of variable taken here.
                        __num = (uint32_t)(*((uint32_t *)&__f));
                                                         ^
src/NodeToken.h:4456:31: note: Variable created here.
                        float __f = 0;
                              ^
src/NodeToken.h:4467:29: note: Using object that points to local variable '__f' that is out of scope.
                        c = __num & 0xff;
                            ^
src/NodeToken.h:4470:33: error: Using object that points to local variable '__f' that is out of scope. [invalidLifetime]
                        __num = __num / 256;
                                ^
src/NodeToken.h:4458:58: note: Address of variable taken here.
                        __num = (uint32_t)(*((uint32_t *)&__f));
                                                         ^
src/NodeToken.h:4456:31: note: Variable created here.
                        float __f = 0;
                              ^
src/NodeToken.h:4470:33: note: Using object that points to local variable '__f' that is out of scope.
                        __num = __num / 256;
                                ^
src/NodeToken.h:4259:34: warning: Either the condition 'i>-1' is redundant or the array 'v->sizes[20]' is accessed at index -1, which is out of bounds. [negativeIndex]
                start += v->sizes[i];
                                 ^
src/NodeToken.h:4254:21: note: Assuming that condition 'i>-1' is not redundant
                if(i>-1)
                    ^
src/NodeToken.h:4259:34: note: Negative array index
                start += v->sizes[i];
                                 ^
src/string_function.h:44:17: information: --check-library: There is no matching configuration for function std::string() [checkLibraryFunction]
    return std::string( buf.get(), buf.get() + size - 1 ); // We don't want the '\0' inside
                ^
src/asm_struct_enum.h:206:33: information: --check-library: There is no matching configuration for function next() [checkLibraryFunction]
            _it = _texts.insert(next(_it), m);
                                ^
src/asm_struct_enum.h:213:20: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
            return string(_texts.back());
                   ^
src/asm_struct_enum.h:219:16: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
        return string(*_it);
               ^
src/asm_struct_enum.h:223:19: information: --check-library: There is no matching configuration for function findText() [checkLibraryFunction]
        int pos = findText(" ");
                  ^
src/asm_struct_enum.h:240:20: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
            return string(_texts.front());
                   ^
src/asm_struct_enum.h:248:16: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
        return string(_texts[pos]);
               ^
src/asm_struct_enum.h:278:27: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
            if (s.compare(string(*_it)) == 0)
                          ^
src/tokenizer.h:773:17: information: --check-library: There is no matching configuration for function next() [checkLibraryFunction]
            if (next(it) == script.end())
                ^
src/tokenizer.h:781:22: information: --check-library: There is no matching configuration for function next() [checkLibraryFunction]
                it = next(it);
                     ^
src/NodeToken.h:27:5: information: --check-library: There is no matching configuration for function ESP_LOGD() [checkLibraryFunction]
    ESP_LOGD("ESPLiveScript", "%s\r\n", str.c_str());
    ^
src/NodeToken.h:131:38: information: --check-library: There is no matching configuration for function uxTaskGetStackHighWaterMark() [checkLibraryFunction]
    UBaseType_t stackHighWaterMark = uxTaskGetStackHighWaterMark(loopTaskHandle);
                                     ^
src/NodeToken.h:146:5: information: --check-library: There is no matching configuration for function displayStat() [checkLibraryFunction]
    displayStat("");
    ^
src/NodeToken.h:160:38: information: --check-library: There is no matching configuration for function uxTaskGetStackHighWaterMark() [checkLibraryFunction]
    UBaseType_t stackHighWaterMark = uxTaskGetStackHighWaterMark(loopTaskHandle);
                                     ^
src/NodeToken.h:754:21: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
                if (string(getTargetText()).compare(0, 1, "@") == 0)
                    ^
src/NodeToken.h:758:25: information: --check-library: There is no matching configuration for function findMember() [checkLibraryFunction]
                int i = findMember(_vartype, string(getTargetText()));
                        ^
src/NodeToken.h:758:46: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
                int i = findMember(_vartype, string(getTargetText()));
                                             ^
src/NodeToken.h:797:45: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                int cmp = getChildAtPos(2)->getChildAtPos(i)->findMaxArgumentSize();
                                            ^
src/NodeToken.h:1349:46: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
                if (extvariablestore.compare(string(v.getTokenText())) != 0)
                                             ^
src/NodeToken.h:1356:36: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
                extvariablestore = string(v.getTokenText());
                                   ^
src/NodeToken.h:1382:46: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
                if (extvariablestore.compare(string(v.getTokenText())) != 0)
                                             ^
src/NodeToken.h:1389:36: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
                extvariablestore = string(v.getTokenText());
                                   ^
src/NodeToken.h:1619:15: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
        res = string(p->getTargetText());
              ^
src/NodeToken.h:1778:18: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
        else if (string(nd->getTokenText()).find("x") != string::npos)
                 ^
src/NodeToken.h:2276:21: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
        string sd = string(nd->getTargetText());
                    ^
src/NodeToken.h:2649:89: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
            variables = string_format("%s %d", variables.c_str(), nd->getChildAtPos(1)->getChildAtPos(i)->getVarType()->total_size);
                                                                                        ^
src/NodeToken.h:2826:30: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
            content.addAfter(string(_div[i]));
                             ^
src/NodeToken.h:3185:23: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
    nd->setTargetText(string(nd->parent->getTargetText()));
                      ^
src/NodeToken.h:3316:39: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
            if (nd->getChildAtPos(1)->getChildAtPos(0)->_nodetype == numberNode)
                                      ^
src/NodeToken.h:3319:55: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                f = stringToInt(nd->getChildAtPos(1)->getChildAtPos(0)->getTokenText());
                                                      ^
src/NodeToken.h:3433:39: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
            if (nd->getChildAtPos(1)->getChildAtPos(0)->_nodetype == numberNode)
                                      ^
src/NodeToken.h:3436:55: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                f = stringToInt(nd->getChildAtPos(1)->getChildAtPos(0)->getTokenText());
                                                      ^
src/NodeToken.h:3593:39: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
            if (nd->getChildAtPos(0)->getChildAtPos(j)->findMaxArgumentSize() - 1 >= i)
                                      ^
src/NodeToken.h:3619:34: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
        if (t->getChildAtPos(0)->getChildAtPos(i)->isPointer)
                                 ^
src/NodeToken.h:3622:35: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
            nd->getChildAtPos(0)->getChildAtPos(i)->visitNode();
                                  ^
src/NodeToken.h:3638:45: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                if (func->getChildAtPos(1)->getChildAtPos(i)->getVarType()->_varType == __Args__)
                                            ^
src/NodeToken.h:3642:57: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                globalType.push(func->getChildAtPos(1)->getChildAtPos(i)->getVarType()->_varType);
                                                        ^
src/NodeToken.h:3643:39: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                nd->getChildAtPos(0)->getChildAtPos(i)->visitNode();
                                      ^
src/NodeToken.h:3650:39: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                nd->getChildAtPos(0)->getChildAtPos(i)->visitNode();
                                      ^
src/NodeToken.h:3653:39: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
            if (nd->getChildAtPos(0)->getChildAtPos(i)->getVarType() != NULL and convert)
                                      ^
src/NodeToken.h:3654:71: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                translateType(globalType.get(), nd->getChildAtPos(0)->getChildAtPos(i)->getVarType()->_varType, register_numl.get());
                                                                      ^
src/NodeToken.h:3660:52: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                _vartype = func->getChildAtPos(1)->getChildAtPos(i)->getVarType()->_varType;
                                                   ^
src/NodeToken.h:3663:53: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                    _vartype = t->getChildAtPos(0)->getChildAtPos(i)->getVarType()->_varType;
                                                    ^
src/NodeToken.h:3677:49: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                _vartype = t->getChildAtPos(0)->getChildAtPos(i)->getVarType()->_varType;
                                                ^
src/NodeToken.h:3701:42: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                if (t->getChildAtPos(0)->getChildAtPos(i)->getChildAtPos(0)->_nodetype == numberNode)
                                         ^
src/NodeToken.h:3725:62: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                    for (int k = 0; k < t->getChildAtPos(0)->getChildAtPos(i)->getChildAtPos(0)->getVarType()->size; k++)
                                                             ^
src/NodeToken.h:3732:46: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                    if (t->getChildAtPos(0)->getChildAtPos(i)->getChildAtPos(0)->_nodetype == callFunctionNode)
                                             ^
src/NodeToken.h:3744:46: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                    if (t->getChildAtPos(0)->getChildAtPos(i)->getChildAtPos(0)->_nodetype == extCallFunctionNode)
                                             ^
src/NodeToken.h:3756:51: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                    else if (t->getChildAtPos(0)->getChildAtPos(i)->getChildAtPos(0)->_nodetype == localVariableNode)
                                                  ^
src/NodeToken.h:3760:138: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                            bufferText->addAfter(bufferText->sp.pop(), string_format("l32i a%d,a1,%d", regbase + i, t->getChildAtPos(0)->getChildAtPos(i)->getChildAtPos(0)->stack_pos));
                                                                                                                                         ^
src/NodeToken.h:3765:138: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                            bufferText->addAfter(bufferText->sp.pop(), string_format("l32i a%d,a1,%d", regbase + i, t->getChildAtPos(0)->getChildAtPos(i)->getChildAtPos(0)->stack_pos));
                                                                                                                                         ^
src/NodeToken.h:3768:51: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                    else if (t->getChildAtPos(2)->getChildAtPos(i)->getChildAtPos(0)->_nodetype == globalVariableNode)
                                                  ^
src/NodeToken.h:3818:49: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                    v = func->getChildAtPos(1)->getChildAtPos(i)->getVarType();
                                                ^
src/NodeToken.h:3820:47: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                    v = nd->getChildAtPos(0)->getChildAtPos(i)->getVarType();
                                              ^
src/NodeToken.h:3877:41: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
            if (func->getChildAtPos(1)->getChildAtPos(i)->isPointer)
                                        ^
src/NodeToken.h:3882:39: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                nd->getChildAtPos(0)->getChildAtPos(i)->visitNode();
                                      ^
src/NodeToken.h:3884:53: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                int start = func->getChildAtPos(1)->getChildAtPos(i)->stack_pos - _STACK_SIZE;
                                                    ^
src/NodeToken.h:3908:57: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                globalType.push(func->getChildAtPos(1)->getChildAtPos(i)->getVarType()->_varType);
                                                        ^
src/NodeToken.h:3911:39: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                nd->getChildAtPos(0)->getChildAtPos(i)->visitNode();
                                      ^
src/NodeToken.h:3914:53: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                int start = func->getChildAtPos(1)->getChildAtPos(i)->stack_pos - _STACK_SIZE + func->getChildAtPos(1)->getChildAtPos(i)->getVarType()->total_size;
                                                    ^
src/NodeToken.h:3915:51: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                int tot = func->getChildAtPos(1)->getChildAtPos(i)->getVarType()->size - 1;
                                                  ^
src/NodeToken.h:3916:61: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                for (int j = 0; j < func->getChildAtPos(1)->getChildAtPos(i)->getVarType()->size; j++)
                                                            ^
src/NodeToken.h:3919:47: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                    if (nd->getChildAtPos(0)->getChildAtPos(i)->getVarType() != NULL)
                                              ^
src/NodeToken.h:3921:79: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                        translateType(globalType.get(), nd->getChildAtPos(0)->getChildAtPos(i)->getVarType()->_varType, register_numl.get());
                                                                              ^
src/NodeToken.h:3930:54: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                    start -= func->getChildAtPos(1)->getChildAtPos(i)->getVarType()->sizes[tot - j];
                                                     ^
src/NodeToken.h:3931:71: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                    asmInstruction asmInstr = func->getChildAtPos(1)->getChildAtPos(i)->getVarType()->store[tot - j];
                                                                      ^
src/NodeToken.h:3939:58: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                        if (j == func->getChildAtPos(1)->getChildAtPos(i)->getVarType()->size - 1)
                                                         ^
src/NodeToken.h:3951:58: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
                        if (j == func->getChildAtPos(1)->getChildAtPos(i)->getVarType()->size - 1)
                                                         ^
src/NodeToken.h:4051:35: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
    switch (nd->getChildAtPos(1)->getChildAtPos(0)->type)
                                  ^
src/NodeToken.h:4055:31: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
        nd->getChildAtPos(1)->getChildAtPos(0)->type = TokenMoreOrEqualThan; // greater or equal
                              ^
src/NodeToken.h:4059:31: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
        nd->getChildAtPos(1)->getChildAtPos(0)->type = TokenNotEqual;
                              ^
src/NodeToken.h:4062:31: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
        nd->getChildAtPos(1)->getChildAtPos(0)->type = TokenDoubleEqual;
                              ^
src/NodeToken.h:4065:31: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
        nd->getChildAtPos(1)->getChildAtPos(0)->type = TokenLessThan;
                              ^
src/NodeToken.h:4068:31: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
        nd->getChildAtPos(1)->getChildAtPos(0)->type = TokenLessOrEqualThan;
                              ^
src/NodeToken.h:4071:31: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
        nd->getChildAtPos(1)->getChildAtPos(0)->type = TokenMoreThan;
                              ^
src/NodeToken.h:4145:29: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
                string sd = string(nd->getTargetText());
                            ^
src/NodeToken.h:4437:26: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
            string str = string(nd->getChildAtPos(0)->getTokenText());
                         ^
src/NodeToken.h:4634:21: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
        string sd = string(nd->getTargetText());
                    ^
src/NodeToken.h:4812:21: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
        string sd = string(nd->getTargetText());
                    ^
src/NodeToken.h:4988:31: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
    if (nd->getChildAtPos(0)->getChildAtPos(0)->_nodetype != numberNode)
                              ^
src/NodeToken.h:5087:21: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
    string target = string(nd->getTokenText());
                    ^
src/NodeToken.h:5145:26: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
            string tmp = string((*text->getChildAtPos(i)));
                         ^
src/NodeToken.h:5220:22: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
        string tmp = string((*text->getChildAtPos(i)));
                     ^
src/NodeToken.h:5271:26: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
            string tmp = string((*text->getChildAtPos(i)));
                         ^
src/NodeToken.h:5316:26: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
            string tmp = string((*text->getChildAtPos(i)));
                         ^
src/NodeToken.h:5731:22: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
        string tmp = string((*text->getChildAtPos(i)));
                     ^
src/NodeToken.h:5751:22: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
        string tmp = string((*text->getChildAtPos(i)));
                     ^
src/NodeToken.h:5759:27: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
                    tmp = string((*text->getChildAtPos(i - 1)));
                          ^
src/NodeToken.h:5775:27: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
                    tmp = string((*text->getChildAtPos(i - 1)));
                          ^
src/NodeToken.h:5792:27: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
                    tmp = string((*text->getChildAtPos(i - 1)));
                          ^
src/asm_parser.h:514:16: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
      if (trim(string((*it)->getText())).compare(trim(s)) == 0)
               ^
src/asm_parser.h:556:19: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
    if (findLabel(string(res.getText()), asm_parsed) != -1)
                  ^
src/asm_parser.h:1081:27: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
    int index = findLabel(string(ps.getText()), asm_parsed);
                          ^
src/asm_parser.h:1108:27: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
    int index = findLabel(string(ps.getText()), asm_parsed);
                          ^
src/asm_parser.h:1390:3: information: --check-library: There is no matching configuration for function displayStat() [checkLibraryFunction]
  displayStat("before mem");
  ^
src/asm_parser.h:1394:3: information: --check-library: There is no matching configuration for function displayStat() [checkLibraryFunction]
  displayStat("after mem");
  ^
src/asm_parser.h:1629:29: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
      int index = findLabel(string(parse_line->getText()), asm_parsed);
                            ^
src/asm_parser.h:1811:40: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
      vector<string> args = split(trim(string((*it2)->getText())), " ");
                                       ^
src/asm_parser.h:1816:29: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
      int index = findLabel(string((*it)->getText()), asm_parsed);
                            ^
src/asm_parser.h:1822:30: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
        string stackstring = string((*it)->getText()).insert(2, "stack_");
                             ^
src/asm_parser.h:1866:3: information: --check-library: There is no matching configuration for function displayStat() [checkLibraryFunction]
  displayStat("before call parsem");
  ^
src/asm_parser.h:1909:18: information: --check-library: There is no matching configuration for function fs::FS::open() [checkLibraryFunction]
  File root = fs.open(name, FILE_WRITE);
                 ^
src/asm_parser.h:1910:8: information: --check-library: There is no matching configuration for function File::write() [checkLibraryFunction]
  root.write((uint8_t *)"ESPLiveScript1.0.1", 19);
       ^
src/asm_parser.h:1911:8: information: --check-library: There is no matching configuration for function File::write() [checkLibraryFunction]
  root.write((uint8_t *)&bin->tmp_instruction_size, 2);
       ^
src/asm_parser.h:1914:8: information: --check-library: There is no matching configuration for function File::write() [checkLibraryFunction]
  root.write((uint8_t *)&bin->instruction_size, 2);
       ^
src/asm_parser.h:1917:8: information: --check-library: There is no matching configuration for function File::write() [checkLibraryFunction]
  root.write((uint8_t *)&bin->data_size, 2);
       ^
src/asm_parser.h:1920:8: information: --check-library: There is no matching configuration for function File::write() [checkLibraryFunction]
  root.write((uint8_t *)&bin->function_size, 2);
       ^
src/asm_parser.h:1923:8: information: --check-library: There is no matching configuration for function File::write() [checkLibraryFunction]
  root.write(bin->binary_data, bin->tmp_instruction_size);
       ^
src/asm_parser.h:1924:8: information: --check-library: There is no matching configuration for function File::write() [checkLibraryFunction]
  root.write(bin->function_data, bin->function_size);
       ^
src/execute_asm.h:35:5: information: --check-library: There is no matching configuration for function heap_caps_free() [checkLibraryFunction]
    heap_caps_free(bin->binary_data);
    ^
src/execute_asm.h:37:5: information: --check-library: There is no matching configuration for function heap_caps_free() [checkLibraryFunction]
    heap_caps_free(bin->function_data);
    ^
src/execute_asm.h:93:28: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
      int index = findLink(string(textptr).substr(6, 100), externalType::value);
                           ^
src/execute_asm.h:126:28: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
      int index = findLink(string(textptr).substr(2, 100), externalType::function);
                           ^
src/execute_asm.h:174:17: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
      gc.name = string(textptr);
                ^
src/execute_asm.h:179:22: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
      gc.variables = string(textptr);
                     ^
src/execute_asm.h:232:32: information: --check-library: There is no matching configuration for function heap_caps_malloc() [checkLibraryFunction]
  uint32_t *exec = (uint32_t *)heap_caps_malloc(bin->instruction_size, MALLOC_CAP_EXEC);
                               ^
src/execute_asm.h:339:18: information: --check-library: There is no matching configuration for function fs::FS::open() [checkLibraryFunction]
  File root = fs.open(name);
                 ^
src/execute_asm.h:342:8: information: --check-library: There is no matching configuration for function File::read() [checkLibraryFunction]
  root.read((uint8_t *)ver, 19);
       ^
src/execute_asm.h:350:8: information: --check-library: There is no matching configuration for function File::read() [checkLibraryFunction]
  root.read((uint8_t *)&bin->tmp_instruction_size, 2);
       ^
src/execute_asm.h:353:8: information: --check-library: There is no matching configuration for function File::read() [checkLibraryFunction]
  root.read((uint8_t *)&bin->instruction_size, 2);
       ^
src/execute_asm.h:356:8: information: --check-library: There is no matching configuration for function File::read() [checkLibraryFunction]
  root.read((uint8_t *)&bin->data_size, 2);
       ^
src/execute_asm.h:359:8: information: --check-library: There is no matching configuration for function File::read() [checkLibraryFunction]
  root.read((uint8_t *)&bin->function_size, 2);
       ^
src/execute_asm.h:364:8: information: --check-library: There is no matching configuration for function File::read() [checkLibraryFunction]
  root.read(tmp, bin->tmp_instruction_size);
       ^
src/execute_asm.h:367:8: information: --check-library: There is no matching configuration for function File::read() [checkLibraryFunction]
  root.read(tmp2, bin->function_size);
       ^
src/execute_asm.h:559:5: information: --check-library: There is no matching configuration for function heap_caps_aligned_free() [checkLibraryFunction]
    heap_caps_aligned_free(ex->start_program);
    ^
src/execute_asm.h:567:5: information: --check-library: There is no matching configuration for function heap_caps_free() [checkLibraryFunction]
    heap_caps_free(ex->data);
    ^
src/execute.h:72:5: information: --check-library: There is no matching configuration for function vTaskDelay() [checkLibraryFunction]
    vTaskDelay(1);
    ^
src/execute.h:126:17: information: --check-library: There is no matching configuration for function vTaskSuspend() [checkLibraryFunction]
                vTaskSuspend(__run_handles[i]);
                ^
src/execute.h:138:17: information: --check-library: There is no matching configuration for function vTaskResume() [checkLibraryFunction]
                vTaskResume(__run_handles[i]);
                ^
src/execute.h:150:9: information: --check-library: There is no matching configuration for function xEventGroupSync() [checkLibraryFunction]
        xEventGroupSync(xCreatedEventGroup,
        ^
src/execute.h:154:9: information: --check-library: There is no matching configuration for function vTaskDelay() [checkLibraryFunction]
        vTaskDelay(10);
        ^
src/execute.h:155:9: information: --check-library: There is no matching configuration for function xEventGroupSync() [checkLibraryFunction]
        xEventGroupSync(xCreatedEventGroup2,
        ^
src/execute.h:238:16: information: --check-library: There is no matching configuration for function xEventGroupSync() [checkLibraryFunction]
    uxReturn = xEventGroupSync(xCreatedEventGroup,
               ^
src/execute.h:249:13: information: --check-library: There is no matching configuration for function xEventGroupClearBits() [checkLibraryFunction]
            xEventGroupClearBits(xCreatedEventGroup, MASK);
            ^
src/execute.h:260:13: information: --check-library: There is no matching configuration for function xEventGroupSync() [checkLibraryFunction]
            xEventGroupSync(xCreatedEventGroup2,
            ^
src/execute.h:270:13: information: --check-library: There is no matching configuration for function xEventGroupClearBits() [checkLibraryFunction]
            xEventGroupClearBits(xCreatedEventGroup2, MASK);
            ^
src/execute.h:275:9: information: --check-library: There is no matching configuration for function xEventGroupSync() [checkLibraryFunction]
        xEventGroupSync(xCreatedEventGroup2,
        ^
src/execute.h:395:13: information: --check-library: There is no matching configuration for function vTaskDelay() [checkLibraryFunction]
            vTaskDelay(10);
            ^
src/execute.h:398:17: information: --check-library: There is no matching configuration for function vTaskSuspend() [checkLibraryFunction]
                vTaskSuspend(*runningPrograms.getHandleByIndex(__run_handle_index));
                ^
src/execute.h:403:13: information: --check-library: There is no matching configuration for function vTaskDelay() [checkLibraryFunction]
            vTaskDelay(10);
            ^
src/execute.h:421:13: information: --check-library: There is no matching configuration for function vTaskDelay() [checkLibraryFunction]
            vTaskDelay(10);
            ^
src/execute.h:422:13: information: --check-library: There is no matching configuration for function vTaskResume() [checkLibraryFunction]
            vTaskResume(*runningPrograms.getHandleByIndex(__run_handle_index));
            ^
src/execute.h:440:13: information: --check-library: There is no matching configuration for function vTaskDelay() [checkLibraryFunction]
            vTaskDelay(10);
            ^
src/execute.h:446:13: information: --check-library: There is no matching configuration for function vTaskDelay() [checkLibraryFunction]
            vTaskDelay(30);
            ^
src/execute.h:450:17: information: --check-library: There is no matching configuration for function vTaskDelete() [checkLibraryFunction]
                vTaskDelete(*runningPrograms.getHandleByIndex(__run_handle_index));
                ^
src/execute.h:454:13: information: --check-library: There is no matching configuration for function vTaskDelay() [checkLibraryFunction]
            vTaskDelay(30);
            ^
src/execute.h:460:13: information: --check-library: There is no matching configuration for function vTaskDelay() [checkLibraryFunction]
            vTaskDelay(10);
            ^
src/execute.h:503:13: information: --check-library: There is no matching configuration for function vTaskDelay() [checkLibraryFunction]
            vTaskDelay(20);
            ^
src/execute.h:522:13: information: --check-library: There is no matching configuration for function xTaskCreateUniversal() [checkLibraryFunction]
            xTaskCreateUniversal(_run_task, taskname.c_str(), 4096 * 2, this, 3, (TaskHandle_t *)runningPrograms.getHandleByIndex(__run_handle_index), core);
            ^
src/execute.h:744:5: information: --check-library: There is no matching configuration for function vTaskDelete() [checkLibraryFunction]
    vTaskDelete(NULL);
    ^
src/ESPLiveScript.h:232:9: information: --check-library: There is no matching configuration for function displayStat() [checkLibraryFunction]
        displayStat("afterclen");
        ^
src/ESPLiveScript.h:501:33: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
                    string sd = string(current_node->getTargetText());
                                ^
src/ESPLiveScript.h:545:21: information: --check-library: There is no matching configuration for function findMember() [checkLibraryFunction]
                i = findMember(current_node->getVarType(), string(current()->getText()));
                    ^
src/ESPLiveScript.h:545:60: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
                i = findMember(current_node->getVarType(), string(current()->getText()));
                                                           ^
src/ESPLiveScript.h:557:56: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
                i = findMember(current_node->_vartype, string(current()->getText()));
                                                       ^
src/ESPLiveScript.h:602:24: information: --check-library: There is no matching configuration for function Token::addText() [checkLibraryFunction]
            current()->addText(string_format("%s.%s", search_result->getVarType()->varName.c_str(), current()->getText()));
                       ^
src/ESPLiveScript.h:643:77: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
            current_node->getChildAtPos(current_node->children_size() - 1)->getChildAtPos(0)->getChildAtPos(0)->copyChildren(_node_token_stack.back());
                                                                            ^
src/ESPLiveScript.h:668:38: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
        current_node = current_node->addChild(NodeToken(inputArgumentsNode));
                                     ^
src/ESPLiveScript.h:862:66: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
                    else if (external_links[i].signature.compare(string(sav_t.back().getText())) == 0)
                                                                 ^
src/ESPLiveScript.h:983:50: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
            if (search_result->getChildAtPos(1)->getChildAtPos(i)->_vartype == __Args__)
                                                 ^
src/ESPLiveScript.h:1020:38: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
        current_node = current_node->addChild(NodeToken(current(), comparatorNode));
                                     ^
src/ESPLiveScript.h:1045:23: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
        current_node->addChild(NodeToken(statementNode));
                      ^
src/ESPLiveScript.h:1049:27: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
            current_node->addChild(NodeToken(current(), stringNode));
                          ^
src/ESPLiveScript.h:1065:31: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
                current_node->addChild(NodeToken(c, breakNode));
                              ^
src/ESPLiveScript.h:1088:31: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
                current_node->addChild(NodeToken(c, continueNode));
                              ^
src/ESPLiveScript.h:1104:31: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
                current_node->addChild(NodeToken(returnNode));
                              ^
src/ESPLiveScript.h:1110:46: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
                current_node = current_node->addChild(NodeToken(returnNode));
                                             ^
src/ESPLiveScript.h:1196:42: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
            current_node = current_node->addChild(NodeToken(assignementNode));
                                         ^
src/ESPLiveScript.h:1203:42: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
            current_node = current_node->addChild(NodeToken(unitaryOpNode));
                                         ^
src/ESPLiveScript.h:1239:42: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
            current_node = current_node->addChild(NodeToken(assignementNode));
                                         ^
src/ESPLiveScript.h:1320:46: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
                current_node = current_node->addChild(NodeToken(binOpNode));
                                             ^
src/ESPLiveScript.h:1407:42: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
            current_node = current_node->addChild(NodeToken(current(), elseNode, targetList.pop()));
                                         ^
src/ESPLiveScript.h:1459:46: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
                current_node = current_node->addChild(NodeToken(&sav_t.back(), whileNode, targetList.get()));
                                             ^
src/ESPLiveScript.h:1533:46: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
                current_node = current_node->addChild(NodeToken(current(), ifNode, targetList.get()));
                                             ^
src/ESPLiveScript.h:1605:46: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
                current_node = current_node->addChild(NodeToken(current(), forNode, targetList.get()));
                                             ^
src/ESPLiveScript.h:1607:46: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
                current_node = current_node->addChild(NodeToken(statementNode));
                                             ^
src/ESPLiveScript.h:1639:46: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
                current_node = current_node->addChild(NodeToken(statementNode));
                                             ^
src/ESPLiveScript.h:1784:32: information: --check-library: There is no matching configuration for function Token::addText() [checkLibraryFunction]
                    current()->addText(string_format("%s._@%s()", nodeTokenList.get().getVarType()->varName.c_str(), nodeTokenList.get().getVarType()->varName.c_str()));
                               ^
src/ESPLiveScript.h:1824:35: information: --check-library: There is no matching configuration for function Context::findVariable() [checkLibraryFunction]
                    current_cntx->findVariable(nodeTokenList.get().getTokenText(), false);
                                  ^
src/ESPLiveScript.h:1835:32: information: --check-library: There is no matching configuration for function Token::addText() [checkLibraryFunction]
                    current()->addText(string_format("%s._@%s", search_result->getVarType()->varName.c_str(), current()->getText()));
                               ^
src/ESPLiveScript.h:1878:46: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
                current_node = current_node->addChild(NodeToken(assignementNode));
                                             ^
src/ESPLiveScript.h:1985:38: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
        current_node = current_node->addChild(NodeToken(current(), blockStatementNode));
                                     ^
src/ESPLiveScript.h:2024:38: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
        current_node = current_node->addChild(NodeToken(defInputArgumentsNode));
                                     ^
src/ESPLiveScript.h:2363:42: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
            current_node = current_node->addChild(NodeToken(ternaryIfNode));
                                         ^
src/ESPLiveScript.h:2401:42: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
            current_node = current_node->addChild(NodeToken(binOpNode));
                                         ^
src/ESPLiveScript.h:2448:42: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
            current_node = current_node->addChild(NodeToken(binOpNode));
                                         ^
src/ESPLiveScript.h:2501:42: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
            current_node = current_node->addChild(NodeToken(testNode));
                                         ^
src/ESPLiveScript.h:2565:42: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
            current_node = current_node->addChild(NodeToken(binOpNode));
                                         ^
src/ESPLiveScript.h:2619:27: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
            current_node->addChild(NodeToken(current(), numberNode));
                          ^
src/ESPLiveScript.h:2647:42: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
            current_node = current_node->addChild(NodeToken(unitaryOpNode));
                                         ^
src/ESPLiveScript.h:2672:42: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
            current_node = current_node->addChild(NodeToken(current(), changeTypeNode));
                                         ^
src/ESPLiveScript.h:2811:24: information: --check-library: There is no matching configuration for function Token::addText() [checkLibraryFunction]
            current()->addText(string_format("%s._@%s", current()->getText(), current()->getText()));
                       ^
src/ESPLiveScript.h:2817:77: information: --check-library: There is no matching configuration for function NodeToken::getChildAtPos() [checkLibraryFunction]
            current_node->getChildAtPos(current_node->children_size() - 1)->getChildAtPos(2)->getChildAtPos(0)->copyChildren(_node_token_stack.back());
                                                                            ^
src/ESPLiveScript.h:2845:42: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
            current_node = current_node->addChild(NodeToken(current(), numberNode));
                                         ^
src/ESPLiveScript.h:2916:40: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
            program.addChildFront(nd)->addChild(NodeToken(current(), stringNode));
                                       ^
src/ESPLiveScript.h:3026:47: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
                    sizestr = sizestr + " " + string(current()->getText());
                                              ^
src/ESPLiveScript.h:3044:51: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
                        sizestr = sizestr + " " + string(current()->getText());
                                                  ^
src/ESPLiveScript.h:3160:40: information: --check-library: There is no matching configuration for function Token::addText() [checkLibraryFunction]
                            current()->addText(string_format("%s._@%s", usded.varName.c_str(), current()->getText()));
                                       ^
src/ESPLiveScript.h:3179:40: information: --check-library: There is no matching configuration for function Token::addText() [checkLibraryFunction]
                            current()->addText(string_format("%s.%s", usded.varName.c_str(), current()->getText()));
                                       ^
src/ESPLiveScript.h:3295:26: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
                j.json = string(current()->getText());
                         ^
src/ESPLiveScript.h:3318:30: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
                j.variable = string(current()->getText());
                             ^
src/ESPLiveScript.h:3422:44: information: --check-library: There is no matching configuration for function Token::addText() [checkLibraryFunction]
                                current()->addText(string_format("%s._@%s()", current_node->getVarType()->varName.c_str(), current_node->getVarType()->varName.c_str()));
                                           ^
src/ESPLiveScript.h:3441:43: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
                            current_node->addChild(NodeToken(current(), stringNode));
                                          ^
src/ESPLiveScript.h:3505:40: information: --check-library: There is no matching configuration for function Token::addText() [checkLibraryFunction]
                            current()->addText(string_format("%s._@%s", current_node->getVarType()->varName.c_str(), current()->getText()));
                                       ^
src/ESPLiveScript.h:3544:58: information: --check-library: There is no matching configuration for function NodeToken::addChild() [checkLibraryFunction]
                            current_node = current_node->addChild(NodeToken(assignementNode));
                                                         ^
src/asm_struct_enum.h:78:9: information: --check-library: There is no matching configuration for function push() [checkLibraryFunction]
        push(sav + 1);
        ^
src/asm_struct_enum.h:87:9: information: --check-library: There is no matching configuration for function push() [checkLibraryFunction]
        push(sav - 1);
        ^
src/asm_struct_enum.h:579:3: warning: Member variable 'result_parse_line::bincode' is not initialized in the constructor. [uninitMemberVar]
  result_parse_line(){}
  ^
src/asm_struct_enum.h:579:3: warning: Member variable 'result_parse_line::size' is not initialized in the constructor. [uninitMemberVar]
  result_parse_line(){}
  ^
src/asm_struct_enum.h:579:3: warning: Member variable 'result_parse_line::op' is not initialized in the constructor. [uninitMemberVar]
  result_parse_line(){}
  ^
src/asm_struct_enum.h:579:3: warning: Member variable 'result_parse_line::address' is not initialized in the constructor. [uninitMemberVar]
  result_parse_line(){}
  ^
src/asm_struct_enum.h:579:3: warning: Member variable 'result_parse_line::align' is not initialized in the constructor. [uninitMemberVar]
  result_parse_line(){}
  ^
src/asm_struct_enum.h:579:3: warning: Member variable 'result_parse_line::line' is not initialized in the constructor. [uninitMemberVar]
  result_parse_line(){}
  ^
src/asm_struct_enum.h:846:5: warning: Member variable '_arguments::intval' is not initialized in the constructor. [uninitMemberVar]
    _arguments()
    ^
src/asm_struct_enum.h:846:5: warning: Member variable '_arguments::floatval' is not initialized in the constructor. [uninitMemberVar]
    _arguments()
    ^
src/asm_struct_enum.h:850:5: warning: Member variable '_arguments::floatval' is not initialized in the constructor. [uninitMemberVar]
    _arguments(int val)
    ^
src/asm_struct_enum.h:855:5: warning: Member variable '_arguments::intval' is not initialized in the constructor. [uninitMemberVar]
    _arguments(float val)
    ^
src/tokenizer.h:882:5: warning: Member variable 'Token::line' is not initialized in the constructor. [uninitMemberVar]
    Token()
    ^
src/tokenizer.h:891:5: warning: Member variable 'Token::line' is not initialized in the constructor. [uninitMemberVar]
    Token(tokenType h)
    ^
src/tokenizer.h:899:5: warning: Member variable 'Token::line' is not initialized in the constructor. [uninitMemberVar]
    Token(tokenType _type, int __vartype, int _line)
    ^
src/tokenizer.h:908:5: warning: Member variable 'Token::line' is not initialized in the constructor. [uninitMemberVar]
    Token(tokenType _type, int __vartype)
    ^
src/tokenizer.h:974:5: warning: Member variable 'Tokens::_script' is not initialized in the constructor. [uninitMemberVar]
    Tokens()
    ^
src/execute.h:80:5: warning: Member variable '_executablesClass::nb_concurrent_programs_current' is not initialized in the constructor. [uninitMemberVar]
    _executablesClass()
    ^
src/execute.h:298:5: warning: Member variable 'Executable::error' is not initialized in the constructor. [uninitMemberVar]
    Executable()
    ^
src/execute.h:298:5: warning: Member variable 'Executable::df' is not initialized in the constructor. [uninitMemberVar]
    Executable()
    ^
src/execute.h:307:5: warning: Member variable 'Executable::__run_handle_index' is not initialized in the constructor. [uninitMemberVar]
    Executable(executable _executable)
    ^
src/execute.h:307:5: warning: Member variable 'Executable::error' is not initialized in the constructor. [uninitMemberVar]
    Executable(executable _executable)
    ^
src/execute.h:307:5: warning: Member variable 'Executable::df' is not initialized in the constructor. [uninitMemberVar]
    Executable(executable _executable)
    ^
src/asm_struct_enum.h:19:5: warning:inconclusive: Member variable 'Stack < int >::_default' is not initialized in the constructor. [uninitMemberVar]
    Stack() {}
    ^
src/asm_struct_enum.h:19:5: warning:inconclusive: Member variable 'Stack < bool >::_default' is not initialized in the constructor. [uninitMemberVar]
    Stack() {}
    ^
src/asm_struct_enum.h:19:5: warning:inconclusive: Member variable 'Stack < varTypeEnum >::_default' is not initialized in the constructor. [uninitMemberVar]
    Stack() {}
    ^
src/asm_struct_enum.h:22:9: performance: Variable '_default' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
        _default = def;
        ^
src/asm_struct_enum.h:217:12: style:inconclusive: Technically the member function 'Text::current' can be const. [functionConst]
    string current()
           ^
src/asm_struct_enum.h:244:12: style:inconclusive: Technically the member function 'Text::textAt' can be const. [functionConst]
    string textAt(int pos)
           ^
src/asm_struct_enum.h:392:9: style:inconclusive: Technically the member function 'Text::size' can be const. [functionConst]
    int size()
        ^
src/asm_struct_enum.h:441:9: style:inconclusive: Technically the member function 'Text::get' can be const. [functionConst]
    int get()
        ^
src/asm_struct_enum.h:887:9: style:inconclusive: Technically the member function 'Arguments::size' can be const. [functionConst]
    int size()
        ^
src/tokenizer.h:788:10: style:inconclusive: Technically the member function 'Script::currentChar' can be const. [functionConst]
    char currentChar()
         ^
src/tokenizer.h:917:15: style:inconclusive: Technically the member function 'Token::getType' can be const. [functionConst]
    tokenType getType()
              ^
src/tokenizer.h:991:9: style:inconclusive: Technically the member function 'Tokens::size' can be const. [functionConst]
    int size()
        ^
src/NodeToken.h:778:14: style:inconclusive: Technically the member function 'NodeToken::getNodeTokenType' can be const. [functionConst]
    nodeType getNodeTokenType()
             ^
src/NodeToken.h:782:9: style:inconclusive: Technically the member function 'NodeToken::children_size' can be const. [functionConst]
    int children_size()
        ^
src/NodeToken.h:1084:10: performance:inconclusive: Technically the member function 'Context::addFunction' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    void addFunction(NodeToken *nd)
         ^
src/NodeToken.h:1125:10: performance:inconclusive: Technically the member function 'Context::findCandidate' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    bool findCandidate(char *str)
         ^
src/NodeToken.h:1152:10: performance:inconclusive: Technically the member function 'Context::findFunction' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    void findFunction(Token *t)
         ^
src/execute.h:185:9: performance:inconclusive: Technically the member function '_executablesClass::getFirstHandle' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    int getFirstHandle()
        ^
src/execute.h:554:10: style:inconclusive: Technically the member function 'Executable::isExeExists' can be const. [functionConst]
    bool isExeExists()
         ^
src/execute.h:685:10: style:inconclusive: Technically the member function 'Executable::isRunning' can be const. [functionConst]
    bool isRunning()
         ^
src/ESPLiveScript.h:93:9: performance:inconclusive: Technically the member function 'Parser::size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    int size()
        ^
src/ESPLiveScript.h:117:10: performance:inconclusive: Technically the member function 'Parser::Match' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    bool Match(tokenType tt)
         ^
src/ESPLiveScript.h:121:10: performance:inconclusive: Technically the member function 'Parser::Match' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    bool Match(tokenType tt, int index)
         ^
src/asm_struct_enum.h:850:5: style: Class '_arguments' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    _arguments(int val)
    ^
src/asm_struct_enum.h:855:5: style: Class '_arguments' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    _arguments(float val)
    ^
src/tokenizer.h:891:5: style: Class 'Token' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    Token(tokenType h)
    ^
src/NodeToken.h:453:5: style: Class 'NodeToken' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    NodeToken(nodeType tt)
    ^
src/NodeToken.h:466:5: style: Class 'NodeToken' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    NodeToken(Token *t)
    ^
src/NodeToken.h:549:5: style: Class 'NodeToken' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    NodeToken(NodeToken *nd)
    ^
src/execute.h:307:5: style: Class 'Executable' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    Executable(executable _executable)
    ^
src/asm_struct_enum.h:20:5: style: Class 'Stack < int >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    Stack(T def)
    ^
src/asm_struct_enum.h:20:5: style: Class 'Stack < bool >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    Stack(T def)
    ^
src/asm_struct_enum.h:20:5: style: Class 'Stack < string >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    Stack(T def)
    ^
src/asm_struct_enum.h:20:5: style: Class 'Stack < NodeToken >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    Stack(T def)
    ^
src/asm_struct_enum.h:20:5: style: Class 'Stack < varTypeEnum >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    Stack(T def)
    ^
src/NodeToken.h:3413:17: style: The if condition is the same as the previous if condition [duplicateCondition]
            if (regular)
                ^
src/NodeToken.h:3380:17: note: First condition
            if (regular)
                ^
src/NodeToken.h:3413:17: note: Second condition
            if (regular)
                ^
src/NodeToken.h:3538:17: style: The if condition is the same as the previous if condition [duplicateCondition]
            if (regular)
                ^
src/NodeToken.h:3505:17: note: First condition
            if (regular)
                ^
src/NodeToken.h:3538:17: note: Second condition
            if (regular)
                ^
src/asm_struct_enum.h:317:21: style: Condition '_pos>-1' is always false [knownConditionTrueFalse]
             if(_pos>-1 && _texts[_pos]!=NULL)
                    ^
src/asm_struct_enum.h:316:20: note: Assignment '_pos=-1', assigned value is -1
             _pos=-1;
                   ^
src/asm_struct_enum.h:317:21: note: Condition '_pos>-1' is always false
             if(_pos>-1 && _texts[_pos]!=NULL)
                    ^
src/NodeToken.h:3578:11: style: Condition 't==NULL' is always false [knownConditionTrueFalse]
    if (t == NULL)
          ^
src/NodeToken.h:3561:12: note: Assuming that condition 'nd==NULL' is not redundant
    if (nd == NULL)
           ^
src/NodeToken.h:3577:20: note: Assignment 't=nd', assigned value is 0
    NodeToken *t = nd; // cntx.findFunction(nd->_token);
                   ^
src/NodeToken.h:3578:11: note: Condition 't==NULL' is always false
    if (t == NULL)
          ^
src/execute.h:437:20: style: Condition '!toResetSync' is always false [knownConditionTrueFalse]
            while (!toResetSync)
                   ^
src/execute.h:436:27: note: Assignment 'toResetSync=true', assigned value is 1
            toResetSync = true;
                          ^
src/execute.h:437:20: note: Condition '!toResetSync' is always false
            while (!toResetSync)
                   ^
src/NodeToken.h:4463:25: warning: %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'unsigned int *'. [invalidScanfArgType_int]
                        sscanf(ndt->getTokenText(), "%lu", &__num);
                        ^
src/execute.h:547:13: warning: %ld in format string (no. 1) requires 'long' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
            printf("Free memory after:%ld freed:%ld\r\n", mema, mema - memb);
            ^
src/execute.h:547:13: warning: %ld in format string (no. 2) requires 'long' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
            printf("Free memory after:%ld freed:%ld\r\n", mema, mema - memb);
            ^
src/asm_struct_enum.h:634:5: information: --check-library: Function push_back() should have <use>/<leak-ignore> configuration [checkLibraryUseIgnore]
    return parsed_lines.back();
    ^
src/tokenizer.h:999:55: information: --check-library: Function tokenizer() should have <noreturn> configuration [checkLibraryNoReturn]
        tokenizer(script, true, increae_line, nbToken);
                                                      ^
src/tokenizer.h:1008:57: information: --check-library: Function tokenizer() should have <noreturn> configuration [checkLibraryNoReturn]
        tokenizer(script, update, increae_line, nbToken);
                                                        ^
src/asm_external.h:70:33: information: --check-library: Function bindFunction() should have <noreturn> configuration [checkLibraryNoReturn]
  bindFunction(out,name,in, ptr);
                                ^
src/asm_external.h:85:32: information: --check-library: Function bindVariable() should have <noreturn> configuration [checkLibraryNoReturn]
  bindVariable(out,name,in,ptr);
                               ^
src/NodeToken.h:27:53: information: --check-library: Function ESP_LOGD() should have <noreturn> configuration [checkLibraryNoReturn]
    ESP_LOGD("ESPLiveScript", "%s\r\n", str.c_str());
                                                    ^
src/NodeToken.h:37:30: information: --check-library: Function pushToConsole() should have <noreturn> configuration [checkLibraryNoReturn]
    pushToConsole(str, false);
                             ^
src/NodeToken.h:142:275: information: --check-library: Function pushToConsole() should have <noreturn> configuration [checkLibraryNoReturn]
    pushToConsole(string_format(" %s :max used memory: %ld maxstack:%ld  started %d free mem:%ld consumed %ld time:%dms", text, __maxMemUsage, __MaxStackMemory, __startmem, esp_get_free_heap_size(), __startmem - esp_get_free_heap_size(), (__endtime - __starttime) / 240000));
                                                                                                                                                                                                                                                                                  ^
src/NodeToken.h:146:20: information: --check-library: Function displayStat() should have <noreturn> configuration [checkLibraryNoReturn]
    displayStat("");
                   ^
src/NodeToken.h:2028:64: information: --check-library: Function translateType() should have <noreturn> configuration [checkLibraryNoReturn]
        translateType(globalType.get(), r, register_numr.get());
                                                               ^
src/NodeToken.h:2499:82: information: --check-library: Function translateType() should have <noreturn> configuration [checkLibraryNoReturn]
                translateType(globalType.get(), v->_varType, register_numl.get());
                                                                                 ^
src/NodeToken.h:2850:111: information: --check-library: Function translateType() should have <noreturn> configuration [checkLibraryNoReturn]
            translateType(globalType.get(), nd->getChildAtPos(1)->getVarType()->_varType, register_numl.get());
                                                                                                              ^
src/NodeToken.h:3970:50: information: --check-library: Function _visitCallFunctionTemplate() should have <noreturn> configuration [checkLibraryNoReturn]
        _visitCallFunctionTemplate(nd, 10, false);
                                                 ^
src/NodeToken.h:4193:106: information: --check-library: Function translateType() should have <noreturn> configuration [checkLibraryNoReturn]
                translateType(__int__, nd->getChildAtPos(0)->getVarType()->_varType, register_numl.get());
                                                                                                         ^
src/execute_asm.h:35:37: information: --check-library: Function heap_caps_free() should have <noreturn> configuration [checkLibraryNoReturn]
    heap_caps_free(bin->binary_data);
                                    ^
src/execute_asm.h:37:39: information: --check-library: Function heap_caps_free() should have <noreturn> configuration [checkLibraryNoReturn]
    heap_caps_free(bin->function_data);
                                      ^
src/execute_asm.h:249:5: information: --check-library: Function decodeBinaryHeader() should have <use>/<leak-ignore> configuration [checkLibraryUseIgnore]
    return exe;
    ^
src/execute_asm.h:257:5: information: --check-library: Function decodeBinaryHeader() should have <use>/<leak-ignore> configuration [checkLibraryUseIgnore]
    return exe;
    ^
src/execute_asm.h:396:9: information: --check-library: Function asm() should have <noreturn> configuration [checkLibraryNoReturn]
      :);
        ^
src/execute_asm.h:559:46: information: --check-library: Function heap_caps_aligned_free() should have <noreturn> configuration [checkLibraryNoReturn]
    heap_caps_aligned_free(ex->start_program);
                                             ^
src/execute_asm.h:567:29: information: --check-library: Function heap_caps_free() should have <noreturn> configuration [checkLibraryNoReturn]
    heap_caps_free(ex->data);
                            ^
src/execute_asm.h:593:87: information: --check-library: Function pushToConsole() should have <noreturn> configuration [checkLibraryNoReturn]
  pushToConsole(string_format("Overflow error  max size: %d got %d", size, got), true);
                                                                                      ^
src/execute_asm.h:870:86: information: --check-library: Function addExternalFunction() should have <noreturn> configuration [checkLibraryNoReturn]
    addExternalFunction("error", "void", "int,uint32_t,uint32_t", (void *)&showError);
                                                                                     ^
src/execute.h:72:18: information: --check-library: Function vTaskDelay() should have <noreturn> configuration [checkLibraryNoReturn]
    vTaskDelay(1);
                 ^
src/execute.h:158:39: information: --check-library: Function xEventGroupSync() should have <noreturn> configuration [checkLibraryNoReturn]
                        portMAX_DELAY);
                                      ^
src/execute.h:207:27: information: --check-library: Function _prekill() should have <noreturn> configuration [checkLibraryNoReturn]
                _prekill();
                          ^
src/execute.h:215:28: information: --check-library: Function _postkill() should have <noreturn> configuration [checkLibraryNoReturn]
                _postkill();
                           ^
src/execute.h:270:60: information: --check-library: Function xEventGroupClearBits() should have <noreturn> configuration [checkLibraryNoReturn]
            xEventGroupClearBits(xCreatedEventGroup2, MASK);
                                                           ^
src/execute.h:278:39: information: --check-library: Function xEventGroupSync() should have <noreturn> configuration [checkLibraryNoReturn]
                        portMAX_DELAY);
                                      ^
src/execute.h:375:41: information: --check-library: Function freeExecutable() should have <noreturn> configuration [checkLibraryNoReturn]
            freeExecutable(&_executecmd);
                                        ^
src/execute.h:398:84: information: --check-library: Function vTaskSuspend() should have <noreturn> configuration [checkLibraryNoReturn]
                vTaskSuspend(*runningPrograms.getHandleByIndex(__run_handle_index));
                                                                                   ^
src/execute.h:406:51: information: --check-library: Function pushToConsole() should have <noreturn> configuration [checkLibraryNoReturn]
            pushToConsole("Program Halted.", true);
                                                  ^
src/execute.h:515:65: information: --check-library: Function pushToConsole() should have <noreturn> configuration [checkLibraryNoReturn]
                pushToConsole("too many programs at once", true);
                                                                ^
src/execute.h:524:71: information: --check-library: Function pushToConsole() should have <noreturn> configuration [checkLibraryNoReturn]
            pushToConsole("Execution on going CTRL + k to stop", true);
                                                                      ^
src/execute.h:528:55: information: --check-library: Function pushToConsole() should have <noreturn> configuration [checkLibraryNoReturn]
            pushToConsole("Nothing to execute.", true);
                                                      ^
src/execute.h:567:51: information: --check-library: Function pushToConsole() should have <noreturn> configuration [checkLibraryNoReturn]
            pushToConsole(res.error_message, true);
                                                  ^
src/execute.h:581:51: information: --check-library: Function pushToConsole() should have <noreturn> configuration [checkLibraryNoReturn]
            pushToConsole(res.error_message, true);
                                                  ^
src/execute.h:597:51: information: --check-library: Function pushToConsole() should have <noreturn> configuration [checkLibraryNoReturn]
            pushToConsole(res.error_message, true);
                                                  ^
src/execute.h:726:51: information: --check-library: Function pushToConsole() should have <noreturn> configuration [checkLibraryNoReturn]
            pushToConsole(res.error_message, true);
                                                  ^
src/execute.h:736:51: information: --check-library: Function pushToConsole() should have <noreturn> configuration [checkLibraryNoReturn]
            pushToConsole(res.error_message, true);
                                                  ^
src/execute.h:744:22: information: --check-library: Function vTaskDelete() should have <noreturn> configuration [checkLibraryNoReturn]
    vTaskDelete(NULL);
                     ^
src/execute.h:792:71: information: --check-library: Function pushToConsole() should have <noreturn> configuration [checkLibraryNoReturn]
            pushToConsole("please add a name to the executable", true);
                                                                      ^
src/ESPLiveScript.h:287:77: information: --check-library: Function pushToConsole() should have <noreturn> configuration [checkLibraryNoReturn]
                pushToConsole(_executecmd.error.error_message.c_str(), true);
                                                                            ^
src/asm_struct_enum.h:78:22: information: --check-library: Function push() should have <noreturn> configuration [checkLibraryNoReturn]
        push(sav + 1);
                     ^
src/asm_struct_enum.h:87:22: information: --check-library: Function push() should have <noreturn> configuration [checkLibraryNoReturn]
        push(sav - 1);
                     ^
src/NodeToken.h:1610:12: warning: Either the condition 'p!=NULL' is redundant or there is possible null pointer dereference: p. [nullPointerRedundantCheck]
    while (p->_nodetype != forNode and p->_nodetype != whileNode)
           ^
src/NodeToken.h:1616:11: note: Assuming that condition 'p!=NULL' is not redundant
    if (p != NULL)
          ^
src/NodeToken.h:1610:12: note: Null pointer dereference
    while (p->_nodetype != forNode and p->_nodetype != whileNode)
           ^
src/NodeToken.h:3557:26: warning: Either the condition 'nd==NULL' is redundant or there is possible null pointer dereference: nd. [nullPointerRedundantCheck]
    int staack_offset = (nd->getChildAtPos(0)->children_size() - 7) * 4;
                         ^
src/NodeToken.h:3561:12: note: Assuming that condition 'nd==NULL' is not redundant
    if (nd == NULL)
           ^
src/NodeToken.h:3557:26: note: Null pointer dereference
    int staack_offset = (nd->getChildAtPos(0)->children_size() - 7) * 4;
                         ^
src/NodeToken.h:3982:9: warning: Either the condition 'v==NULL' is redundant or there is possible null pointer dereference: v. [nullPointerRedundantCheck]
    if (v->size > 1)
        ^
src/NodeToken.h:3976:11: note: Assuming that condition 'v==NULL' is not redundant
    if (v == NULL)
          ^
src/NodeToken.h:3982:9: note: Null pointer dereference
    if (v->size > 1)
        ^
src/asm_struct_enum.h:631:28: style: C-style pointer casting [cstyleCast]
    result_parse_line *tmp=(result_parse_line *)malloc(sizeof(result_parse_line));
                           ^
src/asm_struct_enum.h:659:26: style: C-style pointer casting [cstyleCast]
  result_parse_line *tmp=(result_parse_line *)malloc(sizeof(result_parse_line));
                         ^
src/execute.h:712:25: style: C-style pointer casting [cstyleCast]
    Executable *exec = ((Executable *)pvParameters);
                        ^
src/NodeToken.h:1752:43: portability: Casting from float * to unsigned int * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
            uint32_t __num = (uint32_t)(*((uint32_t *)&__f));
                                          ^
src/NodeToken.h:4458:46: portability: Casting from float * to unsigned int * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
                        __num = (uint32_t)(*((uint32_t *)&__f));
                                             ^
src/asm_struct_enum.h:316:18: style: Redundant initialization for '_pos'. The initialized value is overwritten before it is read. [redundantInitialization]
             _pos=-1;
                 ^
src/asm_struct_enum.h:315:23: note: _pos is initialized
             int _pos = findText((char *)str.c_str());
                      ^
src/asm_struct_enum.h:316:18: note: _pos is overwritten
             _pos=-1;
                 ^
src/execute.h:578:13: style: Redundant initialization for 'res'. The initialized value is overwritten before it is read. [redundantInitialization]
        res = executeBinary("@__" + prog, _executecmd, 9999, this, args);
            ^
src/execute.h:576:34: note: res is initialized
        error_message_struct res = executeBinary("@__footer", _executecmd, 9999, this, d);
                                 ^
src/execute.h:578:13: note: res is overwritten
        res = executeBinary("@__" + prog, _executecmd, 9999, this, args);
            ^
src/execute.h:594:13: style: Redundant initialization for 'res'. The initialized value is overwritten before it is read. [redundantInitialization]
        res = executeBinary("@__" + prog, _executecmd, 9999, this, args,json);
            ^
src/execute.h:592:34: note: res is initialized
        error_message_struct res = executeBinary("@__footer", _executecmd, 9999, this, d);
                                 ^
src/execute.h:594:13: note: res is overwritten
        res = executeBinary("@__" + prog, _executecmd, 9999, this, args,json);
            ^
src/execute.h:613:13: style: Redundant initialization for 'res'. The initialized value is overwritten before it is read. [redundantInitialization]
        res = executeBinary("@__" + prog, _executecmd, 9999, this, args);
            ^
src/execute.h:611:34: note: res is initialized
        error_message_struct res = executeBinary("@__footer", _executecmd, 9999, this, d);
                                 ^
src/execute.h:613:13: note: res is overwritten
        res = executeBinary("@__" + prog, _executecmd, 9999, this, args);
            ^
src/execute.h:723:13: style: Redundant initialization for 'res'. The initialized value is overwritten before it is read. [redundantInitialization]
        res = executeBinary(_fg->args[0], exec->df.exe, exec->__run_handle_index, exec, exec->args,_fg->json);
            ^
src/execute.h:721:34: note: res is initialized
        error_message_struct res = executeBinary("@__footer", exec->df.exe, exec->__run_handle_index, exec, d);
                                 ^
src/execute.h:723:13: note: res is overwritten
        res = executeBinary(_fg->args[0], exec->df.exe, exec->__run_handle_index, exec, exec->args,_fg->json);
            ^
src/execute.h:733:13: style: Redundant initialization for 'res'. The initialized value is overwritten before it is read. [redundantInitialization]
        res = executeBinary("@__main", exec->df.exe, exec->__run_handle_index, exec, exec->args,exec->df.json);
            ^
src/execute.h:732:34: note: res is initialized
        error_message_struct res = executeBinary("@__footer", exec->df.exe, exec->__run_handle_index, exec, d);
                                 ^
src/execute.h:733:13: note: res is overwritten
        res = executeBinary("@__main", exec->df.exe, exec->__run_handle_index, exec, exec->args,exec->df.json);
            ^
src/ESPLiveScript.h:131:22: style: Variable 'point_regnum' is reassigned a value before the old one has been used. [redundantAssignment]
        point_regnum = 4;
                     ^
src/ESPLiveScript.h:130:22: note: point_regnum is assigned
        point_regnum = 4;
                     ^
src/ESPLiveScript.h:131:22: note: point_regnum is overwritten
        point_regnum = 4;
                     ^
src/NodeToken.h:3568:9: style:inconclusive: Found duplicate branches for 'if' and 'else'. [duplicateBranch]
        if (isExtCall)
        ^
src/NodeToken.h:3570:9: note: Found duplicate branches for 'if' and 'else'.
        else
        ^
src/NodeToken.h:3568:9: note: Found duplicate branches for 'if' and 'else'.
        if (isExtCall)
        ^
src/NodeToken.h:5107:13: style:inconclusive: Found duplicate branches for 'if' and 'else'. [duplicateBranch]
            if (strlen(nd->getChildAtPos(i)->getTokenText()) > 0)
            ^
src/NodeToken.h:5109:13: note: Found duplicate branches for 'if' and 'else'.
            else
            ^
src/NodeToken.h:5107:13: note: Found duplicate branches for 'if' and 'else'.
            if (strlen(nd->getChildAtPos(i)->getTokenText()) > 0)
            ^
src/NodeToken.h:1584:9: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
        break;
        ^
src/NodeToken.h:1701:9: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
        break;
        ^
src/NodeToken.h:3933:25: style: The scope of the variable 'sav' can be reduced. [variableScope]
                    int sav;
                        ^
src/NodeToken.h:4289:9: style: The scope of the variable 'sav' can be reduced. [variableScope]
    int sav = 9;
        ^
src/NodeToken.h:4449:21: style: The scope of the variable 'c' can be reduced. [variableScope]
            uint8_t c;
                    ^
src/NodeToken.h:5399:29: style: The scope of the variable 'ind' can be reduced. [variableScope]
                        int ind = -1;
                            ^
src/asm_parser.h:94:9: style: The scope of the variable 'add_size' can be reduced. [variableScope]
    int add_size = 0;
        ^
src/asm_parser.h:464:12: style: The scope of the variable 'values' can be reduced. [variableScope]
  uint32_t values[4];
           ^
src/execute_asm.h:310:8: style: The scope of the variable 'ver' can be reduced. [variableScope]
  char ver[19];
       ^
src/ESPLiveScript.h:3015:17: style: The scope of the variable 'j' can be reduced. [variableScope]
            int j = 0;
                ^
src/execute.h:750:34: style:inconclusive: Function 'kill' argument 1 names different: declaration 'handle' definition 'handle_number'. [funcArgNamesDifferent]
void _executablesClass::kill(int handle_number)
                                 ^
src/execute.h:118:19: note: Function 'kill' argument 1 names different: declaration 'handle' definition 'handle_number'.
    void kill(int handle);
                  ^
src/execute.h:750:34: note: Function 'kill' argument 1 names different: declaration 'handle' definition 'handle_number'.
void _executablesClass::kill(int handle_number)
                                 ^
src/tokenizer.h:1971:18: style: Local variable 'c2' shadows outer variable [shadowVariable]
            char c2 = script->nextChar();
                 ^
src/tokenizer.h:1318:10: note: Shadowed declaration
    char c2;
         ^
src/tokenizer.h:1971:18: note: Shadow variable
            char c2 = script->nextChar();
                 ^
src/tokenizer.h:2150:26: style: Local variable 'c2' shadows outer variable [shadowVariable]
                    char c2 = script->nextChar();
                         ^
src/tokenizer.h:1318:10: note: Shadowed declaration
    char c2;
         ^
src/tokenizer.h:2150:26: note: Shadow variable
                    char c2 = script->nextChar();
                         ^
src/NodeToken.h:1086:20: style: Local variable '__tmpToken' shadows outer variable [shadowVariable]
        NodeToken *__tmpToken = new NodeToken();
                   ^
src/NodeToken.h:428:12: note: Shadowed declaration
NodeToken *__tmpToken;
           ^
src/NodeToken.h:1086:20: note: Shadow variable
        NodeToken *__tmpToken = new NodeToken();
                   ^
src/NodeToken.h:2553:13: style: Local variable 'start' shadows outer variable [shadowVariable]
        int start = nd->stack_pos;
            ^
src/NodeToken.h:2540:9: note: Shadowed declaration
    int start = nd->stack_pos;
        ^
src/NodeToken.h:2553:13: note: Shadow variable
        int start = nd->stack_pos;
            ^
src/NodeToken.h:4301:21: style: Local variable 'start' shadows outer variable [shadowVariable]
                int start = nd->getChildAtPos(i)->stack_pos;
                    ^
src/NodeToken.h:4297:17: note: Shadowed declaration
            int start = nd->getChildAtPos(i)->stack_pos;
                ^
src/NodeToken.h:4301:21: note: Shadow variable
                int start = nd->getChildAtPos(i)->stack_pos;
                    ^
src/NodeToken.h:5274:32: style: Local variable 'd2' shadows outer variable [shadowVariable]
                vector<string> d2 = split(tmp, " ");
                               ^
src/NodeToken.h:5205:20: note: Shadowed declaration
    vector<string> d2;
                   ^
src/NodeToken.h:5274:32: note: Shadow variable
                vector<string> d2 = split(tmp, " ");
                               ^
src/NodeToken.h:5279:36: style: Local variable 'd' shadows outer variable [shadowVariable]
                    vector<string> d = split(before, " ");
                                   ^
src/NodeToken.h:5204:20: note: Shadowed declaration
    vector<string> d;
                   ^
src/NodeToken.h:5279:36: note: Shadow variable
                    vector<string> d = split(before, " ");
                                   ^
src/NodeToken.h:5400:30: style: Local variable 'found' shadows outer variable [shadowVariable]
                        bool found = false;
                             ^
src/NodeToken.h:66:6: note: Shadowed declaration
bool found;
     ^
src/NodeToken.h:5400:30: note: Shadow variable
                        bool found = false;
                             ^
src/NodeToken.h:5443:30: style: Local variable 'found' shadows outer variable [shadowVariable]
                        bool found = false;
                             ^
src/NodeToken.h:66:6: note: Shadowed declaration
bool found;
     ^
src/NodeToken.h:5443:30: note: Shadow variable
                        bool found = false;
                             ^
src/NodeToken.h:5540:30: style: Local variable 'found' shadows outer variable [shadowVariable]
                        bool found = false;
                             ^
src/NodeToken.h:66:6: note: Shadowed declaration
bool found;
     ^
src/NodeToken.h:5540:30: note: Shadow variable
                        bool found = false;
                             ^
src/NodeToken.h:5594:30: style: Local variable 'found' shadows outer variable [shadowVariable]
                        bool found = false;
                             ^
src/NodeToken.h:66:6: note: Shadowed declaration
bool found;
     ^
src/NodeToken.h:5594:30: note: Shadow variable
                        bool found = false;
                             ^
src/NodeToken.h:5648:30: style: Local variable 'found' shadows outer variable [shadowVariable]
                        bool found = false;
                             ^
src/NodeToken.h:66:6: note: Shadowed declaration
bool found;
     ^
src/NodeToken.h:5648:30: note: Shadow variable
                        bool found = false;
                             ^
src/asm_parser.h:1333:22: style: Local variable '__v' shadows outer variable [shadowVariable]
      vector<string> __v = split(trim(str), " ");
                     ^
src/tokenizer.h:63:9: note: Shadowed declaration
varType __v;
        ^
src/asm_parser.h:1333:22: note: Shadow variable
      vector<string> __v = split(trim(str), " ");
                     ^
src/execute_asm.h:79:16: style: Local variable 'content' shadows outer variable [shadowVariable]
      uint32_t content = bincode + address;
               ^
src/NodeToken.h:374:6: note: Shadowed declaration
Text content;
     ^
src/execute_asm.h:79:16: note: Shadow variable
      uint32_t content = bincode + address;
               ^
src/execute_asm.h:96:18: style: Local variable 'content' shadows outer variable [shadowVariable]
        uint32_t content;
                 ^
src/NodeToken.h:374:6: note: Shadowed declaration
Text content;
     ^
src/execute_asm.h:96:18: note: Shadow variable
        uint32_t content;
                 ^
src/execute_asm.h:136:18: style: Local variable 'content' shadows outer variable [shadowVariable]
        uint32_t content = (uint32_t)((external_links[index].ptr));
                 ^
src/NodeToken.h:374:6: note: Shadowed declaration
Text content;
     ^
src/execute_asm.h:136:18: note: Shadow variable
        uint32_t content = (uint32_t)((external_links[index].ptr));
                 ^
src/execute_asm.h:512:18: style: Local variable 'i' shadows outer variable [shadowVariable]
        for (int i = 1; i < args.size(); i++)
                 ^
src/execute_asm.h:482:12: note: Shadowed declaration
  for (int i = 0; i < ex.functions.size(); i++)
           ^
src/execute_asm.h:512:18: note: Shadow variable
        for (int i = 1; i < args.size(); i++)
                 ^
src/ESPLiveScript.h:378:30: style: Local variable 'i' shadows outer variable [shadowVariable]
                    for (int i = 0; i < __DEPTH; i++)
                             ^
src/ESPLiveScript.h:362:22: note: Shadowed declaration
            for (int i = 0; i < external_links.size(); i++)
                     ^
src/ESPLiveScript.h:378:30: note: Shadow variable
                    for (int i = 0; i < __DEPTH; i++)
                             ^
src/ESPLiveScript.h:479:31: style: Local variable 'nd' shadows outer variable [shadowVariable]
                    NodeToken nd = NodeToken(changeTypeNode);
                              ^
src/ESPLiveScript.h:448:23: note: Shadowed declaration
            NodeToken nd = NodeToken(changeTypeNode);
                      ^
src/ESPLiveScript.h:479:31: note: Shadow variable
                    NodeToken nd = NodeToken(changeTypeNode);
                              ^
src/ESPLiveScript.h:735:20: style: Local variable '_signature' shadows outer variable [shadowVariable]
            string _signature = sigs.back() + "*";
                   ^
src/ESPLiveScript.h:729:16: note: Shadowed declaration
        string _signature = sigs.back() + current_node->getVarType()->varName;
               ^
src/ESPLiveScript.h:735:20: note: Shadow variable
            string _signature = sigs.back() + "*";
                   ^
src/ESPLiveScript.h:750:23: style: Local variable 'nd' shadows outer variable [shadowVariable]
            NodeToken nd = NodeToken(changeTypeNode);
                      ^
src/ESPLiveScript.h:716:19: note: Shadowed declaration
        NodeToken nd = NodeToken(changeTypeNode);
                  ^
src/ESPLiveScript.h:750:23: note: Shadow variable
            NodeToken nd = NodeToken(changeTypeNode);
                      ^
src/ESPLiveScript.h:762:20: style: Local variable '_signature' shadows outer variable [shadowVariable]
            string _signature = sigs.back() + "|" + current_node->getVarType()->varName;
                   ^
src/ESPLiveScript.h:729:16: note: Shadowed declaration
        string _signature = sigs.back() + current_node->getVarType()->varName;
               ^
src/ESPLiveScript.h:762:20: note: Shadow variable
            string _signature = sigs.back() + "|" + current_node->getVarType()->varName;
                   ^
src/ESPLiveScript.h:768:24: style: Local variable '_signature' shadows outer variable [shadowVariable]
                string _signature = sigs.back() + "*";
                       ^
src/ESPLiveScript.h:762:20: note: Shadowed declaration
            string _signature = sigs.back() + "|" + current_node->getVarType()->varName;
                   ^
src/ESPLiveScript.h:768:24: note: Shadow variable
                string _signature = sigs.back() + "*";
                       ^
src/ESPLiveScript.h:2112:23: style: Local variable '_nd' shadows outer variable [shadowVariable]
            NodeToken _nd = nodeTokenList.pop();
                      ^
src/ESPLiveScript.h:2061:19: note: Shadowed declaration
        NodeToken _nd = nodeTokenList.pop();
                  ^
src/ESPLiveScript.h:2112:23: note: Shadow variable
            NodeToken _nd = nodeTokenList.pop();
                      ^
src/ESPLiveScript.h:2114:23: style: Local variable '_t' shadows outer variable [shadowVariable]
            NodeToken _t = nodeTokenList.pop();
                      ^
src/ESPLiveScript.h:2063:19: note: Shadowed declaration
        NodeToken _t = nodeTokenList.pop();
                  ^
src/ESPLiveScript.h:2114:23: note: Shadow variable
            NodeToken _t = nodeTokenList.pop();
                      ^
src/ESPLiveScript.h:3233:43: style: Local variable 'nd' shadows outer variable [shadowVariable]
                                NodeToken nd = NodeToken(current(), defLocalVariableNode);
                                          ^
src/ESPLiveScript.h:3204:39: note: Shadowed declaration
                            NodeToken nd = NodeToken(current(), defLocalVariableNode);
                                      ^
src/ESPLiveScript.h:3233:43: note: Shadow variable
                                NodeToken nd = NodeToken(current(), defLocalVariableNode);
                                          ^
src/ESPLiveScript.h:3384:43: style: Local variable 'nd' shadows outer variable [shadowVariable]
                                NodeToken nd = nodeTokenList.pop();
                                          ^
src/ESPLiveScript.h:3355:35: note: Shadowed declaration
                        NodeToken nd = nodeTokenList.pop();
                                  ^
src/ESPLiveScript.h:3384:43: note: Shadow variable
                                NodeToken nd = nodeTokenList.pop();
                                          ^
src/ESPLiveScript.h:3385:43: style: Local variable '_t' shadows outer variable [shadowVariable]
                                NodeToken _t = nodeTokenList.pop();
                                          ^
src/ESPLiveScript.h:3356:35: note: Shadowed declaration
                        NodeToken _t = nodeTokenList.pop();
                                  ^
src/ESPLiveScript.h:3385:43: note: Shadow variable
                                NodeToken _t = nodeTokenList.pop();
                                          ^
src/ESPLiveScript.h:3506:39: style: Local variable 'nd' shadows outer variable [shadowVariable]
                            NodeToken nd = NodeToken(*current_node);
                                      ^
src/ESPLiveScript.h:3355:35: note: Shadowed declaration
                        NodeToken nd = nodeTokenList.pop();
                                  ^
src/ESPLiveScript.h:3506:39: note: Shadow variable
                            NodeToken nd = NodeToken(*current_node);
                                      ^
src/ESPLiveScript.h:3541:39: style: Local variable 'nd' shadows outer variable [shadowVariable]
                            NodeToken nd = NodeToken(*current_node);
                                      ^
src/ESPLiveScript.h:3355:35: note: Shadowed declaration
                        NodeToken nd = nodeTokenList.pop();
                                  ^
src/ESPLiveScript.h:3541:39: note: Shadow variable
                            NodeToken nd = NodeToken(*current_node);
                                      ^
src/asm_struct_enum.h:159:35: performance: Function parameter 's' should be passed by const reference. [passedByValue]
    void addAfter(int pos, string s)
                                  ^
src/asm_struct_enum.h:171:36: performance: Function parameter 's' should be passed by const reference. [passedByValue]
    void addBefore(int pos, string s)
                                   ^
src/tokenizer.h:552:31: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
void addExternalDefine(string name,string content)
                              ^
src/tokenizer.h:552:43: performance: Function parameter 'content' should be passed by const reference. [passedByValue]
void addExternalDefine(string name,string content)
                                          ^
src/tokenizer.h:1151:25: performance: Function parameter 't' should be passed by const reference. [passedByValue]
void displaytoken(token t)
                        ^
src/asm_external.h:26:37: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
void bindFunction(string out,string name,string in, void * ptr)
                                    ^
src/asm_external.h:26:49: performance: Function parameter 'in' should be passed by const reference. [passedByValue]
void bindFunction(string out,string name,string in, void * ptr)
                                                ^
src/asm_external.h:68:33: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
void addExternalFunction(string name,string out,string in, void * ptr)
                                ^
src/asm_external.h:68:45: performance: Function parameter 'out' should be passed by const reference. [passedByValue]
void addExternalFunction(string name,string out,string in, void * ptr)
                                            ^
src/asm_external.h:68:56: performance: Function parameter 'in' should be passed by const reference. [passedByValue]
void addExternalFunction(string name,string out,string in, void * ptr)
                                                       ^
src/asm_external.h:72:27: performance: Function parameter 'out' should be passed by const reference. [passedByValue]
void bindVariable( string out,string name,string in,void * ptr)
                          ^
src/asm_external.h:72:38: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
void bindVariable( string out,string name,string in,void * ptr)
                                     ^
src/asm_external.h:72:50: performance: Function parameter 'in' should be passed by const reference. [passedByValue]
void bindVariable( string out,string name,string in,void * ptr)
                                                 ^
src/asm_external.h:83:33: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
void addExternalVariable(string name, string out,string in,void * ptr)
                                ^
src/asm_external.h:83:46: performance: Function parameter 'out' should be passed by const reference. [passedByValue]
void addExternalVariable(string name, string out,string in,void * ptr)
                                             ^
src/asm_external.h:83:57: performance: Function parameter 'in' should be passed by const reference. [passedByValue]
void addExternalVariable(string name, string out,string in,void * ptr)
                                                        ^
src/asm_external.h:89:25: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
void addExternal(string name, externalType type, void * ptr)
                        ^
src/NodeToken.h:35:27: performance: Function parameter 'str' should be passed by const reference. [passedByValue]
void pushToConsole(string str)
                          ^
src/NodeToken.h:563:22: performance: Function parameter '_target' should be passed by const reference. [passedByValue]
    NodeToken(string _target, nodeType tt)
                     ^
src/NodeToken.h:569:49: performance: Function parameter '_target' should be passed by const reference. [passedByValue]
    NodeToken(NodeToken nd, nodeType tt, string _target)
                                                ^
src/asm_parser.h:460:41: performance: Function parameter 'str' should be passed by const reference. [passedByValue]
result_parse_line parseOperandes(string str, int nboperande, operandeType *optypes, int size, uint32_t (*createbin)(uint32_t *val))
                                        ^
src/asm_parser.h:506:22: performance: Function parameter 's' should be passed by const reference. [passedByValue]
int findLabel(string s, parsedLines *asm_parsed)
                     ^
src/execute_asm.h:472:127: performance: Function parameter 'json' should be passed by const reference. [passedByValue]
error_message_struct executeBinary(string function, executable ex, uint32_t handle, void *exePtr, Arguments arguments, string json)
                                                                                                                              ^
src/execute_asm.h:544:43: performance: Function parameter 'function' should be passed by const reference. [passedByValue]
error_message_struct executeBinary(string function, executable ex, uint32_t handle, void *exePtr, Arguments arguments)
                                          ^
src/execute_asm.h:544:64: performance: Function parameter 'ex' should be passed by const reference. [passedByValue]
error_message_struct executeBinary(string function, executable ex, uint32_t handle, void *exePtr, Arguments arguments)
                                                               ^
src/execute_asm.h:544:109: performance: Function parameter 'arguments' should be passed by const reference. [passedByValue]
error_message_struct executeBinary(string function, executable ex, uint32_t handle, void *exePtr, Arguments arguments)
                                                                                                            ^
src/execute.h:474:29: performance: Function parameter 'args' should be passed by const reference. [passedByValue]
    int _run(vector<string> args, bool second_core, int core, Arguments arguments,string json)
                            ^
src/execute.h:474:73: performance: Function parameter 'arguments' should be passed by const reference. [passedByValue]
    int _run(vector<string> args, bool second_core, int core, Arguments arguments,string json)
                                                                        ^
src/execute.h:474:90: performance: Function parameter 'json' should be passed by const reference. [passedByValue]
    int _run(vector<string> args, bool second_core, int core, Arguments arguments,string json)
                                                                                         ^
src/execute.h:559:29: performance: Function parameter 'prog' should be passed by const reference. [passedByValue]
    void executeOnly(string prog)
                            ^
src/execute.h:571:25: performance: Function parameter 'prog' should be passed by const reference. [passedByValue]
    void execute(string prog)
                        ^
src/execute.h:586:26: performance: Function parameter 'prog' should be passed by const reference. [passedByValue]
    void execute (string prog, string json)
                         ^
src/execute.h:586:39: performance: Function parameter 'json' should be passed by const reference. [passedByValue]
    void execute (string prog, string json)
                                      ^
src/execute.h:602:25: performance: Function parameter 'prog' should be passed by const reference. [passedByValue]
    void execute(string prog, Arguments arguments)
                        ^
src/execute.h:620:28: performance: Function parameter 'function' should be passed by const reference. [passedByValue]
 bool functionExist(string function)
                           ^
src/execute.h:637:31: performance: Function parameter 'prog' should be passed by const reference. [passedByValue]
    void executeAsTask(string prog, int core, Arguments arguments,string json)
                              ^
src/execute.h:637:74: performance: Function parameter 'json' should be passed by const reference. [passedByValue]
    void executeAsTask(string prog, int core, Arguments arguments,string json)
                                                                         ^
src/execute.h:659:31: performance: Function parameter 'prog' should be passed by const reference. [passedByValue]
    void executeAsTask(string prog, int core, Arguments arguments)
                              ^
src/execute.h:659:57: performance: Function parameter 'arguments' should be passed by const reference. [passedByValue]
    void executeAsTask(string prog, int core, Arguments arguments)
                                                        ^
src/execute.h:663:31: performance: Function parameter 'prog' should be passed by const reference. [passedByValue]
    void executeAsTask(string prog, Arguments arguments)
                              ^
src/execute.h:663:47: performance: Function parameter 'arguments' should be passed by const reference. [passedByValue]
    void executeAsTask(string prog, Arguments arguments)
                                              ^
src/execute.h:667:31: performance: Function parameter 'prog' should be passed by const reference. [passedByValue]
    void executeAsTask(string prog)
                              ^
src/execute.h:673:31: performance: Function parameter 'prog' should be passed by const reference. [passedByValue]
    void executeAsTask(string prog, int core)
                              ^
src/execute.h:678:31: performance: Function parameter 'prog' should be passed by const reference. [passedByValue]
    void executeAsTask(string prog,string json)
                              ^
src/execute.h:678:43: performance: Function parameter 'json' should be passed by const reference. [passedByValue]
    void executeAsTask(string prog,string json)
                                          ^
src/execute.h:689:41: performance: Function parameter 'json' should be passed by const reference. [passedByValue]
error_message_struct updateParam(string json)
                                        ^
src/execute.h:795:39: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
    void addExe(Executable df, string name)
                                      ^
src/execute.h:812:25: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
    void execute(string name)
                        ^
src/execute.h:823:30: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
        void executeJ(string name, string json)
                             ^
src/execute.h:834:31: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
    bool functionExist(string name, string function)
                              ^
src/execute.h:847:25: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
    void execute(string name, string function)
                        ^
src/execute.h:859:26: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
     void execute(string name, string function,string json)
                         ^
src/execute.h:871:25: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
    void execute(string name, Arguments arguments)
                        ^
src/execute.h:883:25: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
    void execute(string name, string function, Arguments arguments)
                        ^
src/execute.h:894:31: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
    void executeAsTask(string name, Arguments arguments)
                              ^
src/execute.h:905:31: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
    void executeAsTask(string name)
                              ^
src/execute.h:916:32: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
    void executeAsTaskJ(string name,string json)
                               ^
src/execute.h:927:31: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
    void executeAsTask(string name, string function, Arguments arguments)
                              ^
src/execute.h:939:31: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
    void executeAsTask(string name, string function)
                              ^
src/execute.h:950:31: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
    void executeAsTask(string name, int core, Arguments args)
                              ^
src/execute.h:961:31: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
    void executeAsTask(string name, int core)
                              ^
src/execute.h:972:22: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
    void kill(string name)
                     ^
src/execute.h:1003:22: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
    void free(string name)
                     ^
src/execute.h:1044:39: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
    exe_info getExecutableInfo(string name)
                                      ^
src/asm_struct_enum.h:20:13: performance: Function parameter 'def' should be passed by const reference. [passedByValue]
    Stack(T def)
            ^
src/asm_struct_enum.h:68:16: performance: Function parameter 'k' should be passed by const reference. [passedByValue]
    void set(T k)
               ^
src/ESPLiveScript.h:187:13: performance: Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant. [stlcstrParam]
            pushToConsole(Error.error_message.c_str(), true);
            ^
src/ESPLiveScript.h:258:13: performance: Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant. [stlcstrParam]
            pushToConsole(bin.error.error_message.c_str(), true);
            ^
src/ESPLiveScript.h:287:17: performance: Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant. [stlcstrParam]
                pushToConsole(_executecmd.error.error_message.c_str(), true);
                ^
src/NodeToken.h:1293:17: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
                {
                ^
src/NodeToken.h:1318:17: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
                {
                ^
src/asm_external.h:66:30: error: Uninitialized struct member: asmex.ptr [uninitStructMember]
    external_links.push_back(asmex);
                             ^
src/asm_external.h:66:30: error: Uninitialized struct member: asmex.offset [uninitStructMember]
    external_links.push_back(asmex);
                             ^
src/asm_external.h:81:30: error: Uninitialized struct member: asmex.ptr [uninitStructMember]
    external_links.push_back(asmex);
                             ^
src/asm_external.h:81:30: error: Uninitialized struct member: asmex.offset [uninitStructMember]
    external_links.push_back(asmex);
                             ^
src/asm_external.h:97:30: error: Uninitialized struct member: asmex.ptr [uninitStructMember]
    external_links.push_back(asmex);
                             ^
src/asm_external.h:97:30: error: Uninitialized struct member: asmex.offset [uninitStructMember]
    external_links.push_back(asmex);
                             ^
src/asm_parser.h:175:25: error: Uninitialized struct member: error.line [uninitStructMember]
            res.error = error;
                        ^
src/asm_parser.h:183:17: error: Uninitialized struct member: error.line [uninitStructMember]
    res.error = error;
                ^
src/asm_parser.h:175:25: error: Uninitialized struct member: error.pos [uninitStructMember]
            res.error = error;
                        ^
src/asm_parser.h:183:17: error: Uninitialized struct member: error.pos [uninitStructMember]
    res.error = error;
                ^
src/asm_parser.h:209:25: error: Uninitialized struct member: error.line [uninitStructMember]
            res.error = error;
                        ^
src/asm_parser.h:217:17: error: Uninitialized struct member: error.line [uninitStructMember]
    res.error = error;
                ^
src/asm_parser.h:209:25: error: Uninitialized struct member: error.pos [uninitStructMember]
            res.error = error;
                        ^
src/asm_parser.h:217:17: error: Uninitialized struct member: error.pos [uninitStructMember]
    res.error = error;
                ^
src/asm_parser.h:243:25: error: Uninitialized struct member: error.line [uninitStructMember]
            res.error = error;
                        ^
src/asm_parser.h:251:17: error: Uninitialized struct member: error.line [uninitStructMember]
    res.error = error;
                ^
src/asm_parser.h:243:25: error: Uninitialized struct member: error.pos [uninitStructMember]
            res.error = error;
                        ^
src/asm_parser.h:251:17: error: Uninitialized struct member: error.pos [uninitStructMember]
    res.error = error;
                ^
src/asm_parser.h:275:23: error: Uninitialized struct member: error.line [uninitStructMember]
          res.error = error;
                      ^
src/asm_parser.h:283:17: error: Uninitialized struct member: error.line [uninitStructMember]
    res.error = error;
                ^
src/asm_parser.h:275:23: error: Uninitialized struct member: error.pos [uninitStructMember]
          res.error = error;
                      ^
src/asm_parser.h:283:17: error: Uninitialized struct member: error.pos [uninitStructMember]
    res.error = error;
                ^
src/asm_parser.h:307:23: error: Uninitialized struct member: error.line [uninitStructMember]
          res.error = error;
                      ^
src/asm_parser.h:315:17: error: Uninitialized struct member: error.line [uninitStructMember]
    res.error = error;
                ^
src/asm_parser.h:307:23: error: Uninitialized struct member: error.pos [uninitStructMember]
          res.error = error;
                      ^
src/asm_parser.h:315:17: error: Uninitialized struct member: error.pos [uninitStructMember]
    res.error = error;
                ^
src/asm_parser.h:334:19: error: Uninitialized struct member: error.line [uninitStructMember]
      res.error = error;
                  ^
src/asm_parser.h:340:17: error: Uninitialized struct member: error.line [uninitStructMember]
    res.error = error;
                ^
src/asm_parser.h:334:19: error: Uninitialized struct member: error.pos [uninitStructMember]
      res.error = error;
                  ^
src/asm_parser.h:340:17: error: Uninitialized struct member: error.pos [uninitStructMember]
    res.error = error;
                ^
src/asm_parser.h:1267:15: error: Uninitialized struct member: err.line [uninitStructMember]
  asm_Error = err;
              ^
src/asm_parser.h:1267:15: error: Uninitialized struct member: err.pos [uninitStructMember]
  asm_Error = err;
              ^
src/execute.h:1057:16: error: Uninitialized variable: inf [uninitvar]
        return inf;
               ^
src/execute.h:1049:15: note: Assuming condition is false
        if (f != NULL)
              ^
src/execute.h:1057:16: note: Uninitialized variable: inf
        return inf;
               ^
src/execute.h:1064:20: error: Uninitialized variable: inf [uninitvar]
            return inf;
                   ^
src/NodeToken.h:647:19: style: Variable 'nd.parent' is assigned a value that is never used. [unreadVariable]
        nd.parent = this;
                  ^
src/NodeToken.h:1130:15: style: Unused variable: tocmp [unusedVariable]
        char *tocmp;
              ^
src/NodeToken.h:1157:15: style: Unused variable: tocmp [unusedVariable]
        char *tocmp;
              ^
src/NodeToken.h:2695:13: style: Variable 'sav' is assigned a value that is never used. [unreadVariable]
    int sav = 9;
            ^
src/NodeToken.h:3560:17: style: Variable 'nbfloat' is assigned a value that is never used. [unreadVariable]
    int nbfloat = 0;
                ^
src/NodeToken.h:4236:18: style: Variable 't' is assigned a value that is never used. [unreadVariable]
    NodeToken *t = nd;
                 ^
src/NodeToken.h:4448:19: style: Variable '__num' is assigned a value that is never used. [unreadVariable]
            __num = 0;
                  ^
src/asm_parser.h:94:18: style: Variable 'add_size' is assigned a value that is never used. [unreadVariable]
    int add_size = 0;
                 ^
src/asm_parser.h:1658:24: style: Unused variable: error [unusedVariable]
  error_message_struct error;
                       ^
src/execute_asm.h:59:9: style: Unused variable: textptr2 [unusedVariable]
  char *textptr2;
        ^
src/execute.h:865:11: style: Unused variable: args [unusedVariable]
Arguments args;
          ^
src/ESPLiveScript.h:3107:23: style: Variable 'memberpos' is assigned a value that is never used. [unreadVariable]
        int memberpos = 0;
                      ^
src/ESPLiveScript.h:3108:20: style: Variable '_start' is assigned a value that is never used. [unreadVariable]
        int _start = 0;
                   ^
src/ESPLiveScript.h:3109:18: style: Variable '_pos' is assigned a value that is never used. [unreadVariable]
        int _pos = 0;
                 ^
main.cpp:15:17: style: Variable 'exec' is assigned a value that is never used. [unreadVariable]
 Executable exec=_parser.parseScript(&script);
                ^
src/asm_struct_enum.h:202:13: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
            _it--;
            ^
src/asm_struct_enum.h:303:9: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        _it++;
        ^
src/asm_struct_enum.h:339:80: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        for (vector<char *>::iterator it = _texts.begin(); it != _texts.end(); it++)
                                                                               ^
src/asm_struct_enum.h:438:13: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
            _it--;
            ^
src/tokenizer.h:816:17: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
                it--;
                ^
src/tokenizer.h:840:9: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        it++;
        ^
src/tokenizer.h:850:82: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        for (vector<char *>::iterator _it = script.begin(); _it != script.end(); _it++)
                                                                                 ^
src/tokenizer.h:865:13: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
            it++;
            ^
src/asm_external.h:102:91: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
     for(vector<asm_external>::iterator it=external_links.begin();it<external_links.end();it++)
                                                                                          ^
src/NodeToken.h:1632:103: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        for (vector<NodeToken *>::iterator it = __nd->children->begin(); it != __nd->children->end(); it++)
                                                                                                      ^
src/asm_parser.h:124:97: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
  for (vector<result_parse_line *>::iterator it = _asm_parsed.begin(); it != _asm_parsed.end(); it++)
                                                                                                ^
src/asm_parser.h:142:97: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
  for (vector<result_parse_line *>::iterator it = _asm_parsed.begin(); it != _asm_parsed.end(); it++)
                                                                                                ^
src/asm_parser.h:510:97: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
  for (vector<result_parse_line *>::iterator it = asm_parsed->begin(); it != asm_parsed->end(); it++)
                                                                                                ^
src/asm_parser.h:528:95: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
  for (vector<result_parse_line>::iterator it = asm_parsed->begin(); it != asm_parsed->end(); it++)
                                                                                              ^
src/asm_parser.h:1555:97: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
  for (vector<result_parse_line *>::iterator it = asm_parsed->begin(); it != asm_parsed->end(); it++)
                                                                                                ^
src/asm_parser.h:1624:97: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
  for (vector<result_parse_line *>::iterator it = asm_parsed->begin(); it != asm_parsed->end(); it++)
                                                                                                ^
src/asm_parser.h:1665:97: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
  for (vector<result_parse_line *>::iterator it = asm_parsed->begin(); it != asm_parsed->end(); it++)
                                                                                                ^
src/asm_parser.h:1707:7: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
      it2++;
      ^
src/asm_parser.h:1730:97: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
  for (vector<result_parse_line *>::iterator it = asm_parsed->begin(); it != asm_parsed->end(); it++)
                                                                                                ^
src/asm_parser.h:1804:7: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
      it2++;
      ^
src/execute.h:991:104: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
            for (vector<Executable>::iterator it = _scExecutables.begin(); it != _scExecutables.end(); it++)
                                                                                                       ^
src/NodeToken.h:172:18: information: --check-library: Function displayStat() should have <noreturn> configuration [checkLibraryNoReturn]
    displayStat();
                 ^
src/execute_asm.h:648:19: information: --check-library: There is no matching configuration for function scale8() [checkLibraryFunction]
  uint8_t third = scale8(offset8, (256 / 3)); // max = 85
                  ^
src/execute_asm.h:683:31: information: --check-library: There is no matching configuration for function scale8() [checkLibraryFunction]
          uint8_t twothirds = scale8(offset8, ((256 * 2) / 3)); // max=170
                              ^
src/execute_asm.h:701:31: information: --check-library: There is no matching configuration for function scale8() [checkLibraryFunction]
          uint8_t twothirds = scale8(offset8, ((256 * 2) / 3)); // max=170
                              ^
src/execute_asm.h:740:29: information: --check-library: There is no matching configuration for function scale8() [checkLibraryFunction]
        uint8_t twothirds = scale8(offset8, ((256 * 2) / 3)); // max=170
                            ^
src/execute_asm.h:782:9: information: --check-library: There is no matching configuration for function scale8_video_LEAVING_R1_DIRTY() [checkLibraryFunction]
    g = scale8_video_LEAVING_R1_DIRTY(g, Gscale);
        ^
src/execute_asm.h:797:15: information: --check-library: There is no matching configuration for function scale8_video() [checkLibraryFunction]
      desat = scale8_video(desat, desat);
              ^
src/execute_asm.h:810:13: information: --check-library: There is no matching configuration for function scale8() [checkLibraryFunction]
        r = scale8(r, satscale) + 1;
            ^
src/execute_asm.h:812:13: information: --check-library: There is no matching configuration for function scale8() [checkLibraryFunction]
        g = scale8(g, satscale) + 1;
            ^
src/execute_asm.h:814:13: information: --check-library: There is no matching configuration for function scale8() [checkLibraryFunction]
        b = scale8(b, satscale) + 1;
            ^
src/execute_asm.h:827:11: information: --check-library: There is no matching configuration for function scale8_video_LEAVING_R1_DIRTY() [checkLibraryFunction]
    val = scale8_video_LEAVING_R1_DIRTY(val, val);
          ^
src/execute_asm.h:844:13: information: --check-library: There is no matching configuration for function scale8() [checkLibraryFunction]
        r = scale8(r, val) + 1;
            ^
src/execute_asm.h:846:13: information: --check-library: There is no matching configuration for function scale8() [checkLibraryFunction]
        g = scale8(g, val) + 1;
            ^
src/execute_asm.h:848:13: information: --check-library: There is no matching configuration for function scale8() [checkLibraryFunction]
        b = scale8(b, val) + 1;
            ^
src/execute_asm.h:859:10: information: --check-library: There is no matching configuration for function CRGB() [checkLibraryFunction]
  return CRGB(r, g, b);
         ^
src/execute_asm.h:666:27: information: --check-library: Function asm() should have <noreturn> configuration [checkLibraryNoReturn]
        FORCE_REFERENCE(b);
                          ^
src/execute_asm.h:677:29: information: --check-library: Function asm() should have <noreturn> configuration [checkLibraryNoReturn]
          FORCE_REFERENCE(b);
                            ^
src/execute_asm.h:686:29: information: --check-library: Function asm() should have <noreturn> configuration [checkLibraryNoReturn]
          FORCE_REFERENCE(b);
                            ^
src/execute_asm.h:705:29: information: --check-library: Function asm() should have <noreturn> configuration [checkLibraryNoReturn]
          FORCE_REFERENCE(b);
                            ^
src/execute_asm.h:712:29: information: --check-library: Function asm() should have <noreturn> configuration [checkLibraryNoReturn]
          FORCE_REFERENCE(b);
                            ^
src/execute_asm.h:872:67: information: --check-library: Function addExternalFunction() should have <noreturn> configuration [checkLibraryNoReturn]
    addExternalFunction("hsv", "CRGB", "int,int,int", (void *)hsv);
                                                                  ^
src/execute.h:323:23: information: --check-library: There is no matching configuration for function createExectutable() [checkLibraryFunction]
        _executecmd = createExectutable(bin);
                      ^
src/execute.h:375:13: information: --check-library: There is no matching configuration for function freeExecutable() [checkLibraryFunction]
            freeExecutable(&_executecmd);
            ^
src/execute.h:544:13: information: --check-library: There is no matching configuration for function freeExecutable() [checkLibraryFunction]
            freeExecutable(&_executecmd);
            ^
src/execute.h:564:36: information: --check-library: There is no matching configuration for function executeBinary() [checkLibraryFunction]
        error_message_struct res = executeBinary("@_" + prog, _executecmd, 9999, this, args);
                                   ^
src/execute.h:576:36: information: --check-library: There is no matching configuration for function executeBinary() [checkLibraryFunction]
        error_message_struct res = executeBinary("@__footer", _executecmd, 9999, this, d);
                                   ^
src/execute.h:578:15: information: --check-library: There is no matching configuration for function executeBinary() [checkLibraryFunction]
        res = executeBinary("@__" + prog, _executecmd, 9999, this, args);
              ^
src/execute.h:592:36: information: --check-library: There is no matching configuration for function executeBinary() [checkLibraryFunction]
        error_message_struct res = executeBinary("@__footer", _executecmd, 9999, this, d);
                                   ^
src/execute.h:594:15: information: --check-library: There is no matching configuration for function executeBinary() [checkLibraryFunction]
        res = executeBinary("@__" + prog, _executecmd, 9999, this, args,json);
              ^
src/execute.h:611:36: information: --check-library: There is no matching configuration for function executeBinary() [checkLibraryFunction]
        error_message_struct res = executeBinary("@__footer", _executecmd, 9999, this, d);
                                   ^
src/execute.h:613:15: information: --check-library: There is no matching configuration for function executeBinary() [checkLibraryFunction]
        res = executeBinary("@__" + prog, _executecmd, 9999, this, args);
              ^
src/execute.h:721:36: information: --check-library: There is no matching configuration for function executeBinary() [checkLibraryFunction]
        error_message_struct res = executeBinary("@__footer", exec->df.exe, exec->__run_handle_index, exec, d);
                                   ^
src/execute.h:723:15: information: --check-library: There is no matching configuration for function executeBinary() [checkLibraryFunction]
        res = executeBinary(_fg->args[0], exec->df.exe, exec->__run_handle_index, exec, exec->args,_fg->json);
              ^
src/execute.h:732:36: information: --check-library: There is no matching configuration for function executeBinary() [checkLibraryFunction]
        error_message_struct res = executeBinary("@__footer", exec->df.exe, exec->__run_handle_index, exec, d);
                                   ^
src/execute.h:733:15: information: --check-library: There is no matching configuration for function executeBinary() [checkLibraryFunction]
        res = executeBinary("@__main", exec->df.exe, exec->__run_handle_index, exec, exec->args,exec->df.json);
              ^
src/ESPLiveScript.h:235:15: information: --check-library: There is no matching configuration for function createBinary() [checkLibraryFunction]
        bin = createBinary(&footer, &header, &content, __parser_debug);
              ^
src/ESPLiveScript.h:259:13: information: --check-library: There is no matching configuration for function freeBinary() [checkLibraryFunction]
            freeBinary(&bin);
            ^
src/ESPLiveScript.h:276:38: information: --check-library: There is no matching configuration for function createExectutable() [checkLibraryFunction]
            executable _executecmd = createExectutable(&bin);
                                     ^
src/NodeToken.h:24:11: information: --check-library: There is no matching configuration for function LedOS::pushToConsole() [checkLibraryFunction]
    LedOS.pushToConsole(str, force);
          ^
src/ESPLiveScript.h:3652:19: information: --check-library: There is no matching configuration for function LedOS::pushToConsole() [checkLibraryFunction]
            LedOS.pushToConsole("Something Already running kill it first ...");
                  ^
src/ESPLiveScript.h:3673:9: information: --check-library: There is no matching configuration for function _push() [checkLibraryFunction]
        _push(config.ENDLINE);
        ^
src/ESPLiveScript.h:3674:9: information: --check-library: There is no matching configuration for function _push() [checkLibraryFunction]
        _push(cons->prompt(cons).c_str());
        ^
src/ESPLiveScript.h:3674:21: information: --check-library: There is no matching configuration for function Console::prompt() [checkLibraryFunction]
        _push(cons->prompt(cons).c_str());
                    ^
src/ESPLiveScript.h:3716:15: information: --check-library: There is no matching configuration for function LedOS::pushToConsole() [checkLibraryFunction]
        LedOS.pushToConsole("Compiling ...", true);
              ^
src/ESPLiveScript.h:3723:15: information: --check-library: There is no matching configuration for function LedOS::pushToConsole() [checkLibraryFunction]
        LedOS.pushToConsole("filename missing ...", true);
              ^
src/ESPLiveScript.h:3744:19: information: --check-library: There is no matching configuration for function LedOS::pushToConsole() [checkLibraryFunction]
            LedOS.pushToConsole("Something Already running kill it first ...");
                  ^
src/ESPLiveScript.h:3770:20: information: --check-library: There is no matching configuration for function Serial::printf() [checkLibraryFunction]
            Serial.printf("oioioioe");
                   ^
src/ESPLiveScript.h:3784:23: information: --check-library: There is no matching configuration for function LedOS::pushToConsole() [checkLibraryFunction]
                LedOS.pushToConsole("***********START RUN *********");
                      ^
src/ESPLiveScript.h:3790:21: information: --check-library: There is no matching configuration for function _push() [checkLibraryFunction]
                    _push(config.ENDLINE);
                    ^
src/ESPLiveScript.h:3791:21: information: --check-library: There is no matching configuration for function _push() [checkLibraryFunction]
                    _push(cons->prompt(cons).c_str());
                    ^
src/ESPLiveScript.h:3791:33: information: --check-library: There is no matching configuration for function Console::prompt() [checkLibraryFunction]
                    _push(cons->prompt(cons).c_str());
                                ^
src/ESPLiveScript.h:3796:23: information: --check-library: There is no matching configuration for function LedOS::pushToConsole() [checkLibraryFunction]
                LedOS.pushToConsole("Start program", true);
                      ^
src/ESPLiveScript.h:3799:23: information: --check-library: There is no matching configuration for function LedOS::pushToConsole() [checkLibraryFunction]
                LedOS.pushToConsole("Execution done.", true);
                      ^
src/ESPLiveScript.h:3806:15: information: --check-library: There is no matching configuration for function LedOS::pushToConsole() [checkLibraryFunction]
        LedOS.pushToConsole("filename missing ...", true);
              ^
src/ESPLiveScript.h:3813:15: information: --check-library: There is no matching configuration for function LedOS::pushToConsole() [checkLibraryFunction]
        LedOS.pushToConsole("Something Already running kill it first ...");
              ^
src/ESPLiveScript.h:3820:11: information: --check-library: There is no matching configuration for function LedOS::pushToConsole() [checkLibraryFunction]
    LedOS.pushToConsole("Compiling ...", true);
          ^
src/ESPLiveScript.h:3839:19: information: --check-library: There is no matching configuration for function LedOS::pushToConsole() [checkLibraryFunction]
            LedOS.pushToConsole("***********START RUN *********");
                  ^
src/ESPLiveScript.h:3844:17: information: --check-library: There is no matching configuration for function _push() [checkLibraryFunction]
                _push(config.ENDLINE);
                ^
src/ESPLiveScript.h:3845:17: information: --check-library: There is no matching configuration for function _push() [checkLibraryFunction]
                _push(cons->prompt(cons).c_str());
                ^
src/ESPLiveScript.h:3845:29: information: --check-library: There is no matching configuration for function Console::prompt() [checkLibraryFunction]
                _push(cons->prompt(cons).c_str());
                            ^
src/ESPLiveScript.h:3850:19: information: --check-library: There is no matching configuration for function LedOS::pushToConsole() [checkLibraryFunction]
            LedOS.pushToConsole("Start program", true);
                  ^
src/ESPLiveScript.h:3853:19: information: --check-library: There is no matching configuration for function LedOS::pushToConsole() [checkLibraryFunction]
            LedOS.pushToConsole("Execution done.", true);
                  ^
src/ESPLiveScript.h:3858:15: information: --check-library: There is no matching configuration for function LedOS::pushToConsole() [checkLibraryFunction]
        LedOS.pushToConsole(SCExecutable.error.error_message, true);
              ^
src/ESPLiveScript.h:3875:9: information: --check-library: There is no matching configuration for function _push() [checkLibraryFunction]
        _push(config.ENDLINE);
        ^
src/ESPLiveScript.h:3876:9: information: --check-library: There is no matching configuration for function _push() [checkLibraryFunction]
        _push(cons->prompt(cons).c_str());
        ^
src/ESPLiveScript.h:3876:21: information: --check-library: There is no matching configuration for function Console::prompt() [checkLibraryFunction]
        _push(cons->prompt(cons).c_str());
                    ^
src/ESPLiveScript.h:3891:15: information: --check-library: There is no matching configuration for function LedOS::addKeywordCommand() [checkLibraryFunction]
        LedOS.addKeywordCommand("compile", parse_c, "Compile and run a program add '&' for run on the second core");
              ^
src/ESPLiveScript.h:3892:15: information: --check-library: There is no matching configuration for function LedOS::addKeywordCommand() [checkLibraryFunction]
        LedOS.addKeywordCommand("comp", compile_c, "Compile  a program");
              ^
src/ESPLiveScript.h:3893:15: information: --check-library: There is no matching configuration for function LedOS::addKeywordCommand() [checkLibraryFunction]
        LedOS.addKeywordCommand("createbin", saveBin, "Compile  a program into binary");
              ^
src/ESPLiveScript.h:3894:15: information: --check-library: There is no matching configuration for function LedOS::addKeywordCommand() [checkLibraryFunction]
        LedOS.addKeywordCommand("executebin", binload, "executebin");
              ^
src/ESPLiveScript.h:3895:15: information: --check-library: There is no matching configuration for function LedOS::addKeywordCommand() [checkLibraryFunction]
        LedOS.addKeywordCommand("displaybin", displaybin, "displaybin");
              ^
src/ESPLiveScript.h:3896:15: information: --check-library: There is no matching configuration for function LedOS::addKeywordCommand() [checkLibraryFunction]
        LedOS.addKeywordCommand("./", binload, "executebin");
              ^
src/ESPLiveScript.h:3897:15: information: --check-library: There is no matching configuration for function LedOS::addKeywordCommand() [checkLibraryFunction]
        LedOS.addKeywordCommand("list", listExec, "list the compiled programs");
              ^
src/ESPLiveScript.h:3898:15: information: --check-library: There is no matching configuration for function LedOS::addKeywordCommand() [checkLibraryFunction]
        LedOS.addKeywordCommand("free", free, "free the binary free x will free the program with handle x");
              ^
src/ESPLiveScript.h:3899:15: information: --check-library: There is no matching configuration for function LedOS::addKeywordCommand() [checkLibraryFunction]
        LedOS.addKeywordCommand("run", run, "Run an already compiled program (always second Core) run x run program with handle x");
              ^
src/ESPLiveScript.h:3900:15: information: --check-library: There is no matching configuration for function LedOS::addKeywordCommand() [checkLibraryFunction]
        LedOS.addKeywordCommand("kill", kill, "Stop a running program kill x kill program with handle x");
              ^
src/ESPLiveScript.h:3901:15: information: --check-library: There is no matching configuration for function LedOS::addKeywordCommand() [checkLibraryFunction]
        LedOS.addKeywordCommand("parseasm", parseasm, "Parse assembly program");
              ^
src/ESPLiveScript.h:3902:15: information: --check-library: There is no matching configuration for function LedOS::addEscCommand() [checkLibraryFunction]
        LedOS.addEscCommand(18, parsec_cEsc, "Compile and execute a program (always second Core)");
              ^
src/ESPLiveScript.h:3903:15: information: --check-library: There is no matching configuration for function LedOS::addEscCommand() [checkLibraryFunction]
        LedOS.addEscCommand(11, kill_cEsc, "Stop a running program");
              ^
src/ESPLiveScript.h:4091:15: information: --check-library: There is no matching configuration for function LedOS::addHightLightinf() [checkLibraryFunction]
        LedOS.addHightLightinf("sc", formatLine, formatInit, formatLine);
              ^
src/ESPLiveScript.h:3595:65: information: --check-library: Function pushToConsole() should have <noreturn> configuration [checkLibraryNoReturn]
            pushToConsole("Nothing is currently running.", true);
                                                                ^
src/ESPLiveScript.h:3653:29: information: --check-library: Function kill() should have <noreturn> configuration [checkLibraryNoReturn]
            kill(cons, args);
                            ^
src/ESPLiveScript.h:3674:42: information: --check-library: Function _push() should have <noreturn> configuration [checkLibraryNoReturn]
        _push(cons->prompt(cons).c_str());
                                         ^
src/ESPLiveScript.h:3689:116: information: --check-library: Function pushToConsole() should have <noreturn> configuration [checkLibraryNoReturn]
        pushToConsole(string_format("Compiling done. Handle number:%d", scriptRuntime._scExecutables.size()), true);
                                                                                                                   ^
src/ESPLiveScript.h:3693:51: information: --check-library: Function pushToConsole() should have <noreturn> configuration [checkLibraryNoReturn]
        pushToConsole(_scExec.error.error_message);
                                                  ^
src/ESPLiveScript.h:3720:25: information: --check-library: Function freeBinary() should have <noreturn> configuration [checkLibraryNoReturn]
        freeBinary(&bin);
                        ^
src/ESPLiveScript.h:3732:25: information: --check-library: Function freeBinary() should have <noreturn> configuration [checkLibraryNoReturn]
        freeBinary(&bin);
                        ^
src/ESPLiveScript.h:3746:26: information: --check-library: Function kill() should have <noreturn> configuration [checkLibraryNoReturn]
            kill(cons, k);
                         ^
src/ESPLiveScript.h:3772:73: information: --check-library: Function pushToConsole() should have <noreturn> configuration [checkLibraryNoReturn]
            pushToConsole(_executecmd.error.error_message.c_str(), true);
                                                                        ^
src/ESPLiveScript.h:3791:54: information: --check-library: Function _push() should have <noreturn> configuration [checkLibraryNoReturn]
                    _push(cons->prompt(cons).c_str());
                                                     ^
src/ESPLiveScript.h:3815:22: information: --check-library: Function kill() should have <noreturn> configuration [checkLibraryNoReturn]
        kill(cons, k);
                     ^
src/ESPLiveScript.h:3845:50: information: --check-library: Function _push() should have <noreturn> configuration [checkLibraryNoReturn]
                _push(cons->prompt(cons).c_str());
                                                 ^
src/ESPLiveScript.h:3876:42: information: --check-library: Function _push() should have <noreturn> configuration [checkLibraryNoReturn]
        _push(cons->prompt(cons).c_str());
                                         ^
src/NodeToken.h:1609:16: style: Local variable 'p' shadows outer variable [shadowVariable]
    NodeToken *p = current_node;
               ^
src/ESPLiveScript.h:3582:8: note: Shadowed declaration
Parser p = Parser();
       ^
src/NodeToken.h:1609:16: note: Shadow variable
    NodeToken *p = current_node;
               ^
src/NodeToken.h:5283:40: style: Local variable 'p' shadows outer variable [shadowVariable]
                        vector<string> p = split(d[1], ",");
                                       ^
src/ESPLiveScript.h:3582:8: note: Shadowed declaration
Parser p = Parser();
       ^
src/NodeToken.h:5283:40: note: Shadow variable
                        vector<string> p = split(d[1], ",");
                                       ^
src/ESPLiveScript.h:3604:33: performance: Function parameter 'variables' should be passed by const reference. [passedByValue]
Arguments parseInputArgs(string variables)
                                ^
src/ESPLiveScript.h:3677:45: performance: Function parameter 'args' should be passed by const reference. [passedByValue]
void parseasm(Console *cons, vector<string> args)
                                            ^
src/ESPLiveScript.h:3680:46: performance: Function parameter 'args' should be passed by const reference. [passedByValue]
void compile_c(Console *cons, vector<string> args)
                                             ^
src/ESPLiveScript.h:3880:45: performance: Function parameter 'args' should be passed by const reference. [passedByValue]
void listExec(Console *cons, vector<string> args)
                                            ^
src/ESPLiveScript.h:3756:13: performance: Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant. [stlcstrParam]
            pushToConsole(bin.error.error_message.c_str(), true);
            ^
src/ESPLiveScript.h:3772:13: performance: Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant. [stlcstrParam]
            pushToConsole(_executecmd.error.error_message.c_str(), true);
            ^
src/ESPLiveScript.h:333:16: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
            sc = sc + "\n" + s;
               ^
src/ESPLiveScript.h:347:16: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
            sc = sc + "\n" + s;
               ^
src/ESPLiveScript.h:3723:58: information: --check-library: Function pushToConsole() should have <noreturn> configuration [checkLibraryNoReturn]
        LedOS.pushToConsole("filename missing ...", true);
                                                         ^
src/ESPLiveScript.h:3806:58: information: --check-library: Function pushToConsole() should have <noreturn> configuration [checkLibraryNoReturn]
        LedOS.pushToConsole("filename missing ...", true);
                                                         ^
src/ESPLiveScript.h:3748:24: style: Variable 'othercore' is assigned a value that is never used. [unreadVariable]
        bool othercore = false;
                       ^
src/execute_asm.h:201:18: information: --check-library: There is no matching configuration for function string() [checkLibraryFunction]
      jso.json = string(textptr);
                 ^
src/execute_asm.h:412:34: information: --check-library: There is no matching configuration for function deserializeJson() [checkLibraryFunction]
    DeserializationError error = deserializeJson(doc, json);
                                 ^
src/execute_asm.h:417:14: information: --check-library: There is no matching configuration for function Serial::print() [checkLibraryFunction]
      Serial.print(F("deserializeJson() failed: "));
             ^
src/execute_asm.h:417:20: information: --check-library: There is no matching configuration for function F() [checkLibraryFunction]
      Serial.print(F("deserializeJson() failed: "));
                   ^
src/execute_asm.h:418:14: information: --check-library: There is no matching configuration for function Serial::println() [checkLibraryFunction]
      Serial.println(error.f_str());
             ^
src/execute_asm.h:205:15: style: Local variable 'type' shadows outer variable [shadowVariable]
      uint8_t type;
              ^
src/execute_asm.h:50:11: note: Shadowed declaration
  uint8_t type;
          ^
src/execute_asm.h:205:15: note: Shadow variable
      uint8_t type;
              ^
src/execute_asm.h:12:50: performance: Function parameter 'str' should be passed by const reference. [passedByValue]
JsonVariant getfromJson(JsonDocument obj, string str)
                                                 ^
src/execute_asm.h:469:10: error: Uninitialized variable: res [uninitvar]
  return res;
         ^
src/execute_asm.h:408:12: note: Assuming condition is false
  if (json != "")
           ^
src/execute_asm.h:469:10: note: Uninitialized variable: res
  return res;
         ^
src/asm_struct_enum.h:259:17: style: Condition '!isReused(0)' is always true [knownConditionTrueFalse]
            if (!isReused(0))
                ^
src/asm_struct_enum.h:118:8: style:inconclusive: Statements following return, break, continue, goto or throw will never be executed. [unreachableCode]
       for (int i =  _texts.size()-1; i >=0; i--)
       ^
src/asm_struct_enum.h:412:9: style:inconclusive: Statements following return, break, continue, goto or throw will never be executed. [unreachableCode]
        if (pos < 0 or pos >= _texts.size())
        ^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingInclude]

